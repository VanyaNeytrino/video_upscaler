# .github/workflows/build.yml
name: Build Video Upscaler Multi-Platform

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [created]

env:
  FLUTTER_VERSION: '3.27.1'

jobs:
  # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–¥–µ–ª–µ–π - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑
  prepare-models:
    name: Download AI Models
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create asset directories
        run: |
          echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –º–æ–¥–µ–ª–µ–π..."
          mkdir -p assets/executables/{linux,windows,macos}/{models-cunet,models-upconv_7_anime_style_art_rgb,models-upconv_7_photo}
          
      - name: Download real model files
        run: |
          echo "üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ù–ê–°–¢–û–Ø–©–ò–• —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏..."
          chmod +x download_real_models.sh
          ./download_real_models.sh
          
      - name: Verify downloaded models
        run: |
          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:"
          for platform in linux windows macos; do
            echo "üìÅ Platform: $platform"
            find assets/executables/$platform/ -name "*.bin" -o -name "*.param" | head -5
            echo "---"
          done
          
      - name: Upload models as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ai-models
          path: assets/executables/
          retention-days: 1

  # –ú–∞—Ç—Ä–∏—Ü–∞ —Å–±–æ—Ä–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
  build:
    name: Build ${{ matrix.platform }}
    needs: prepare-models
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            flutter-target: linux
            artifact-path: 'build/linux/x64/release/bundle'
            executable: 'video_upscaler'
          - os: windows-latest
            platform: windows
            flutter-target: windows
            artifact-path: 'build/windows/x64/runner/Release'
            executable: 'video_upscaler.exe'
          - os: macos-latest
            platform: macos
            flutter-target: macos
            artifact-path: 'build/macos/Build/Products/Release'
            executable: 'video_upscaler.app'

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download AI models
        uses: actions/download-artifact@v4
        with:
          name: ai-models
          path: assets/executables/

      - name: Verify models for ${{ matrix.platform }}
        shell: bash
        run: |
          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è ${{ matrix.platform }}:"
          if [ -d "assets/executables/${{ matrix.platform }}" ]; then
            find assets/executables/${{ matrix.platform }}/ -name "*.bin" | head -3
            find assets/executables/${{ matrix.platform }}/ -name "*.param" | head -3
            echo "‚úÖ –ú–æ–¥–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è ${{ matrix.platform }}"
          else
            echo "‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è ${{ matrix.platform }}"
            exit 1
          fi

      # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è Linux
      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            libgtk-3-dev \
            libx11-dev \
            pkg-config \
            cmake \
            ninja-build \
            libblkid-dev \
            libsecret-1-dev \
            libjsoncpp-dev \
            clang \
            libglu1-mesa-dev \
            build-essential

      # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è Windows
      - name: Setup Windows environment
        if: matrix.platform == 'windows'
        uses: microsoft/setup-msbuild@v2

      # –ü—Ä–æ–≤–µ—Ä–∫–∞ Flutter –∏ Dart
      - name: Verify Flutter installation
        run: |
          flutter --version
          flutter doctor -v
          
      # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞
      - name: Get Flutter dependencies
        run: flutter pub get

      # –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
      - name: Analyze code
        run: flutter analyze --no-fatal-infos
        continue-on-error: true

      # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
      - name: Run tests
        run: flutter test
        continue-on-error: true

      # –í–∫–ª—é—á–µ–Ω–∏–µ desktop –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      - name: Enable desktop platform
        run: flutter config --enable-${{ matrix.flutter-target }}-desktop

      # –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      - name: Build ${{ matrix.platform }} application
        shell: bash
        run: |
          echo "üî® –°–±–æ—Ä–∫–∞ –¥–ª—è ${{ matrix.platform }}..."
          flutter build ${{ matrix.flutter-target }} --release --verbose
          
          echo "üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–±–æ—Ä–∫–∏:"
          if [ -e "${{ matrix.artifact-path }}/${{ matrix.executable }}" ]; then
            echo "‚úÖ –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: ${{ matrix.executable }}"
            ls -lh "${{ matrix.artifact-path }}/${{ matrix.executable }}"
          else
            echo "‚ùå –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
            find build/ -name "*video_upscaler*" -o -name "*.exe" -o -name "*.app" || echo "–ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
            exit 1
          fi

      # –£–ø–∞–∫–æ–≤–∫–∞ —Å–±–æ—Ä–∫–∏
      - name: Package ${{ matrix.platform }} build
        shell: bash
        run: |
          echo "üì¶ –£–ø–∞–∫–æ–≤–∫–∞ —Å–±–æ—Ä–∫–∏ –¥–ª—è ${{ matrix.platform }}..."
          
          if [[ "${{ matrix.platform }}" == "linux" ]]; then
            cd "${{ matrix.artifact-path }}"
            tar -czf ../../../../video_upscaler_linux_x64.tar.gz ./*
            cd ../../../../
            echo "‚úÖ Created: video_upscaler_linux_x64.tar.gz"
            ls -lh video_upscaler_linux_x64.tar.gz
            
          elif [[ "${{ matrix.platform }}" == "windows" ]]; then
            cd "${{ matrix.artifact-path }}"
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º PowerShell –¥–ª—è Windows
            powershell -Command "Compress-Archive -Path './*' -DestinationPath '../../../../../video_upscaler_windows_x64.zip'"
            cd ../../../../../
            echo "‚úÖ Created: video_upscaler_windows_x64.zip"
            ls -lh video_upscaler_windows_x64.zip
            
          elif [[ "${{ matrix.platform }}" == "macos" ]]; then
            cd "${{ matrix.artifact-path }}"
            zip -r ../../../../../video_upscaler_macos.zip video_upscaler.app/
            cd ../../../../../
            echo "‚úÖ Created: video_upscaler_macos.zip"
            ls -lh video_upscaler_macos.zip
          fi

      # –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Å–±–æ—Ä–∫–∏
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: video-upscaler-${{ matrix.platform }}-build
          path: ${{ matrix.artifact-path }}
          retention-days: 30

      # –ó–∞–≥—Ä—É–∑–∫–∞ —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      - name: Upload packaged artifacts
        uses: actions/upload-artifact@v4
        with:
          name: video-upscaler-${{ matrix.platform }}-package
          path: |
            video_upscaler_*.tar.gz
            video_upscaler_*.zip
          retention-days: 90
          if-no-files-found: error

  # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–≥–æ–≤)
  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all package artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: video-upscaler-*-package
          path: packages/
          merge-multiple: true

      - name: List release artifacts
        run: |
          echo "üì¶ –§–∞–π–ª—ã –¥–ª—è —Ä–µ–ª–∏–∑–∞:"
          find packages/ -type f -ls 2>/dev/null || echo "–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
          ls -la packages/ 2>/dev/null || echo "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è packages –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: packages/*
          name: Video Upscaler ${{ github.ref_name }}
          body: |
            ## Video Upscaler ${{ github.ref_name }}
            
            ### –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:
            - üêß **Linux** (x64) - `video_upscaler_linux_x64.tar.gz`
            - ü™ü **Windows** (x64) - `video_upscaler_windows_x64.zip`
            - üçé **macOS** (Intel/Apple Silicon) - `video_upscaler_macos.zip`
            
            ### –£—Å—Ç–∞–Ω–æ–≤–∫–∞:
            1. –°–∫–∞—á–∞–π—Ç–µ –∞—Ä—Ö–∏–≤ –¥–ª—è –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            2. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –≤ —É–¥–æ–±–Ω—É—é –ø–∞–ø–∫—É
            3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª
            
            ### –ß—Ç–æ –Ω–æ–≤–æ–≥–æ:
            ${{ github.event.release.body }}
            
            ---
            –°–æ–±—Ä–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –ø–æ–º–æ—â—å—é GitHub Actions üöÄ
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–±–æ—Ä–æ–∫
  verify-builds:
    name: Verify All Builds
    needs: build
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: video-upscaler-*-build
          path: builds/

      - name: Verify build completeness
        run: |
          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã —Å–±–æ—Ä–æ–∫:"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Å–±–æ—Ä–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
          platforms=("linux" "windows" "macos")
          for platform in "${platforms[@]}"; do
            if find builds/ -name "*$platform*" -type d | grep -q .; then
              echo "‚úÖ –°–±–æ—Ä–∫–∞ –¥–ª—è $platform –Ω–∞–π–¥–µ–Ω–∞"
            else
              echo "‚ùå –°–±–æ—Ä–∫–∞ –¥–ª—è $platform –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            fi
          done
          
          echo ""
          echo "üìä –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–±–æ—Ä–∫–∞—Ö:"
          find builds/ -type f -name "*video_upscaler*" -o -name "*.exe" -o -name "*.app" | while read file; do
            if [ -f "$file" ]; then
              size=$(du -h "$file" | cut -f1)
              echo "  üìÑ $(basename "$file"): $size"
            fi
          done
