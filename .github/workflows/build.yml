name: Build Multi-Platform
on: 
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            flutter-platform: linux
          - os: windows-latest
            platform: windows
            flutter-platform: windows
          - os: macos-latest
            platform: macos
            flutter-platform: macos
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        lfs: true
        fetch-depth: 0
    
    # ИСПРАВЛЕННАЯ УСТАНОВКА FLUTTER
    - name: Setup Flutter
      uses: subosito/flutter-action@v2.16.0
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
        cache: true
        architecture: x64
    
    # АЛЬТЕРНАТИВНАЯ УСТАНОВКА ЕСЛИ ПЕРВАЯ НЕ РАБОТАЕТ
    - name: Setup Flutter (alternative)
      if: failure()
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          echo "Installing Flutter for Linux..."
          wget -q -O flutter.tar.xz https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_3.24.3-stable.tar.xz
          tar xf flutter.tar.xz
          echo "$PWD/flutter/bin" >> $GITHUB_PATH
          export PATH="$PWD/flutter/bin:$PATH"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          echo "Installing Flutter for macOS..."
          wget -q -O flutter.zip https://storage.googleapis.com/flutter_infra_release/releases/stable/macos/flutter_macos_3.24.3-stable.zip
          unzip -q flutter.zip
          echo "$PWD/flutter/bin" >> $GITHUB_PATH
          export PATH="$PWD/flutter/bin:$PATH"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          echo "Installing Flutter for Windows..."
          curl -L -o flutter.zip https://storage.googleapis.com/flutter_infra_release/releases/stable/windows/flutter_windows_3.24.3-stable.zip
          7z x flutter.zip > NUL
          echo "$PWD/flutter/bin" >> $GITHUB_PATH
          export PATH="$PWD/flutter/bin:$PATH"
        fi
        
        # Настройка Flutter
        flutter config --no-analytics
        flutter precache
      shell: bash
    
    # ПРОВЕРКА УСТАНОВКИ FLUTTER
    - name: Verify Flutter installation
      run: |
        echo "Flutter version:"
        flutter --version
        echo "Dart version:"
        dart --version
        echo "Flutter doctor:"
        flutter doctor -v
    
    # LINUX DEPENDENCIES
    - name: Install Linux dependencies
      if: matrix.platform == 'linux'
      run: |
        echo "Installing Linux dependencies..."
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libx11-dev \
          pkg-config \
          cmake \
          ninja-build \
          libblkid-dev \
          libsecret-1-dev \
          libjsoncpp-dev \
          clang \
          libglu1-mesa-dev \
          libegl1-mesa-dev \
          libwayland-dev \
          xvfb
        
        echo "Verifying GTK installation:"
        pkg-config --modversion gtk+-3.0
        pkg-config --cflags gtk+-3.0
    
    # WINDOWS DEPENDENCIES
    - name: Setup Windows dependencies
      if: matrix.platform == 'windows'
      run: |
        echo "Setting up Windows build environment..."
        # Visual Studio Build Tools уже установлены в windows-latest
        # Проверяем наличие MSBuild
        where msbuild
      shell: cmd
    
    - name: Setup Windows MSBuild
      if: matrix.platform == 'windows'
      uses: microsoft/setup-msbuild@v1.3
    
    # MACOS DEPENDENCIES
    - name: Setup macOS dependencies
      if: matrix.platform == 'macos'
      run: |
        echo "Setting up macOS build environment..."
        # Убеждаемся что Xcode Command Line Tools установлены
        xcode-select --install || true
        xcode-select -p
    
    # FLUTTER DEPENDENCIES
    - name: Get Flutter dependencies
      run: |
        echo "Getting Flutter dependencies..."
        flutter pub get
        echo "Dependencies installed successfully"
    
    # FLUTTER ANALYZE
    - name: Analyze Flutter code
      run: |
        echo "Analyzing Flutter code..."
        flutter analyze
    
    # FLUTTER TEST
    - name: Run Flutter tests
      run: |
        echo "Running Flutter tests..."
        flutter test || true  # Не останавливаем при ошибках тестов
    
    # BUILD APPLICATIONS
    - name: Build Flutter application
      run: |
        echo "Building Flutter application for ${{ matrix.platform }}..."
        
        if [[ "${{ matrix.platform }}" == "linux" ]]; then
          echo "Building for Linux..."
          flutter build linux --release --verbose
          
          echo "Checking Linux build output:"
          ls -la build/linux/x64/release/bundle/
          
        elif [[ "${{ matrix.platform }}" == "windows" ]]; then
          echo "Building for Windows..."
          flutter build windows --release --verbose
          
          echo "Checking Windows build output:"
          dir build\\windows\\x64\\runner\\Release\\
          
        elif [[ "${{ matrix.platform }}" == "macos" ]]; then
          echo "Building for macOS..."
          flutter build macos --release --verbose
          
          echo "Checking macOS build output:"
          ls -la build/macos/Build/Products/Release/
        fi
      shell: bash
    
    # VERIFY BUILD RESULTS
    - name: Verify build results
      run: |
        echo "Verifying build results for ${{ matrix.platform }}..."
        
        if [[ "${{ matrix.platform }}" == "linux" ]]; then
          if [[ -f "build/linux/x64/release/bundle/video_upscaler" ]]; then
            echo "✅ Linux executable found"
            file build/linux/x64/release/bundle/video_upscaler
          else
            echo "❌ Linux executable not found"
            exit 1
          fi
          
        elif [[ "${{ matrix.platform }}" == "windows" ]]; then
          if [[ -f "build/windows/x64/runner/Release/video_upscaler.exe" ]]; then
            echo "✅ Windows executable found"
          else
            echo "❌ Windows executable not found"
            exit 1
          fi
          
        elif [[ "${{ matrix.platform }}" == "macos" ]]; then
          if [[ -d "build/macos/Build/Products/Release/video_upscaler.app" ]]; then
            echo "✅ macOS app bundle found"
            ls -la build/macos/Build/Products/Release/video_upscaler.app/Contents/MacOS/
          else
            echo "❌ macOS app bundle not found"
            exit 1
          fi
        fi
      shell: bash
    
    # PACKAGE APPLICATIONS
    - name: Package application
      run: |
        echo "Packaging application for ${{ matrix.platform }}..."
        
        if [[ "${{ matrix.platform }}" == "linux" ]]; then
          # Создание архива для Linux
          cd build/linux/x64/release/
          tar -czf ../../../../video_upscaler_linux_x64.tar.gz bundle/
          cd ../../../../
          
        elif [[ "${{ matrix.platform }}" == "windows" ]]; then
          # Создание архива для Windows
          cd build/windows/x64/runner/Release/
          7z a ../../../../../video_upscaler_windows_x64.zip *
          cd ../../../../../
          
        elif [[ "${{ matrix.platform }}" == "macos" ]]; then
          # Создание архива для macOS
          cd build/macos/Build/Products/Release/
          zip -r ../../../../../video_upscaler_macos.zip video_upscaler.app/
          cd ../../../../../
        fi
      shell: bash
    
    # UPLOAD BUILD ARTIFACTS
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: video-upscaler-${{ matrix.platform }}
        path: |
          build/${{ matrix.flutter-platform }}/
        retention-days: 30
    
    # UPLOAD PACKAGED ARTIFACTS
    - name: Upload packaged artifacts
      uses: actions/upload-artifact@v4
      with:
        name: video-upscaler-${{ matrix.platform }}-package
        path: |
          *.tar.gz
          *.zip
        retention-days: 90
    
    # UPLOAD LOGS ON FAILURE
    - name: Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.platform }}
        path: |
          *.log
          build/
        retention-days: 7

  # JOB ДЛЯ СОЗДАНИЯ RELEASE (при тегах)
  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/**/*package*/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
