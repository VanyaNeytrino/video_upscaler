import 'dart:io';
import 'dart:typed_data';
import 'package:flutter/services.dart';
import 'package:path/path.dart' as path;
import 'package:http/http.dart'
    as http; // –î–û–ë–ê–í–¨–¢–ï –í pubspec.yaml: http: ^1.1.0

class ExecutableManager {
  late Directory executablesDir;

  String get waifu2xPath {
    if (Platform.isMacOS) {
      return path.join(executablesDir.path, 'macos', 'waifu2x-ncnn-vulkan');
    } else if (Platform.isWindows) {
      return path.join(
          executablesDir.path, 'windows', 'waifu2x-ncnn-vulkan.exe');
    } else {
      return path.join(executablesDir.path, 'linux', 'waifu2x-ncnn-vulkan');
    }
  }

  String get ffmpegPath {
    if (Platform.isMacOS) {
      return path.join(executablesDir.path, 'macos', 'ffmpeg');
    } else if (Platform.isWindows) {
      return path.join(executablesDir.path, 'windows', 'ffmpeg.exe');
    } else {
      return path.join(executablesDir.path, 'linux', 'ffmpeg');
    }
  }

  String getModelPath(String modelType) {
    final platformDir = Platform.isMacOS
        ? 'macos'
        : Platform.isWindows
            ? 'windows'
            : 'linux';

    switch (modelType) {
      case 'cunet':
        return path.join(executablesDir.path, platformDir, 'models-cunet');
      case 'anime':
        return path.join(executablesDir.path, platformDir,
            'models-upconv_7_anime_style_art_rgb');
      case 'photo':
        return path.join(
            executablesDir.path, platformDir, 'models-upconv_7_photo');
      default:
        return path.join(executablesDir.path, platformDir, 'models-cunet');
    }
  }

  Future<void> initializeExecutables() async {
    await _setupExecutablesDirectory();

    // –ù–û–í–û–ï: —Å–Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∏–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏
    await _downloadRealModelFiles();

    await _extractExecutablesFromAssets();
    await _makeExecutablesExecutable();

    print('–í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã');
  }

  Future<void> _setupExecutablesDirectory() async {
    final appSupportDir = await _getApplicationSupportDirectory();
    executablesDir = Directory(path.join(appSupportDir.path, 'executables'));

    if (!await executablesDir.exists()) {
      await executablesDir.create(recursive: true);
    }
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç–æ—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏
  Future<void> _downloadRealModelFiles() async {
    print(
        'üì• –°–∫–∞—á–∏–≤–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–µ —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...');

    final platformDir = Platform.isMacOS
        ? 'macos'
        : Platform.isWindows
            ? 'windows'
            : 'linux';

    // URLs —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è waifu2x-ncnn-vulkan
    final modelUrls = {
      // CUNet –º–æ–¥–µ–ª—å - –æ—Å–Ω–æ–≤–Ω–∞—è
      'models-cunet/noise0_scale2.0x_model.bin':
          'https://github.com/nihui/waifu2x-ncnn-vulkan/raw/master/models-cunet/noise0_scale2.0x_model.bin',
      'models-cunet/noise0_scale2.0x_model.param':
          'https://github.com/nihui/waifu2x-ncnn-vulkan/raw/master/models-cunet/noise0_scale2.0x_model.param',
      'models-cunet/noise1_scale2.0x_model.bin':
          'https://github.com/nihui/waifu2x-ncnn-vulkan/raw/master/models-cunet/noise1_scale2.0x_model.bin',
      'models-cunet/noise1_scale2.0x_model.param':
          'https://github.com/nihui/waifu2x-ncnn-vulkan/raw/master/models-cunet/noise1_scale2.0x_model.param',
      'models-cunet/noise2_scale2.0x_model.bin':
          'https://github.com/nihui/waifu2x-ncnn-vulkan/raw/master/models-cunet/noise2_scale2.0x_model.bin',
      'models-cunet/noise2_scale2.0x_model.param':
          'https://github.com/nihui/waifu2x-ncnn-vulkan/raw/master/models-cunet/noise2_scale2.0x_model.param',
      'models-cunet/noise3_scale2.0x_model.bin':
          'https://github.com/nihui/waifu2x-ncnn-vulkan/raw/master/models-cunet/noise3_scale2.0x_model.bin',
      'models-cunet/noise3_scale2.0x_model.param':
          'https://github.com/nihui/waifu2x-ncnn-vulkan/raw/master/models-cunet/noise3_scale2.0x_model.param',

      // –¢–æ–ª—å–∫–æ noise —Ñ–∞–π–ª—ã
      'models-cunet/noise0_model.bin':
          'https://github.com/nihui/waifu2x-ncnn-vulkan/raw/master/models-cunet/noise0_model.bin',
      'models-cunet/noise0_model.param':
          'https://github.com/nihui/waifu2x-ncnn-vulkan/raw/master/models-cunet/noise0_model.param',
      'models-cunet/noise1_model.bin':
          'https://github.com/nihui/waifu2x-ncnn-vulkan/raw/master/models-cunet/noise1_model.bin',
      'models-cunet/noise1_model.param':
          'https://github.com/nihui/waifu2x-ncnn-vulkan/raw/master/models-cunet/noise1_model.param',
      'models-cunet/noise2_model.bin':
          'https://github.com/nihui/waifu2x-ncnn-vulkan/raw/master/models-cunet/noise2_model.bin',
      'models-cunet/noise2_model.param':
          'https://github.com/nihui/waifu2x-ncnn-vulkan/raw/master/models-cunet/noise2_model.param',
      'models-cunet/noise3_model.bin':
          'https://github.com/nihui/waifu2x-ncnn-vulkan/raw/master/models-cunet/noise3_model.bin',
      'models-cunet/noise3_model.param':
          'https://github.com/nihui/waifu2x-ncnn-vulkan/raw/master/models-cunet/noise3_model.param',

      // Scale —Ñ–∞–π–ª—ã
      'models-cunet/scale2.0x_model.bin':
          'https://github.com/nihui/waifu2x-ncnn-vulkan/raw/master/models-cunet/scale2.0x_model.bin',
      'models-cunet/scale2.0x_model.param':
          'https://github.com/nihui/waifu2x-ncnn-vulkan/raw/master/models-cunet/scale2.0x_model.param',
    };

    final http.Client client = http.Client();

    for (final entry in modelUrls.entries) {
      final relativePath = entry.key;
      final url = entry.value;
      final localPath =
          path.join(executablesDir.path, platformDir, relativePath);

      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      final localDir = Directory(path.dirname(localPath));
      if (!await localDir.exists()) {
        await localDir.create(recursive: true);
      }

      // –ü–†–û–í–ï–†–Ø–ï–ú –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
      final file = File(localPath);
      if (await file.exists()) {
        final size = await file.length();
        if (size > 100 * 1024) {
          // –ë–æ–ª—å—à–µ 100KB = –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
          print(
              '‚úÖ ${path.basename(localPath)}: —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (${(size / 1024 / 1024).toStringAsFixed(1)} MB)');
          continue;
        } else {
          print(
              'üóëÔ∏è ${path.basename(localPath)}: —É–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (${size} bytes)');
          await file.delete();
        }
      }

      print('üì• –°–∫–∞—á–∏–≤–∞–µ–º: ${path.basename(localPath)}');

      try {
        final response = await client.get(Uri.parse(url));

        if (response.statusCode == 200) {
          await file.writeAsBytes(response.bodyBytes);

          final size = response.bodyBytes.length;
          print(
              '‚úÖ –°–∫–∞—á–∞–Ω: ${path.basename(localPath)} (${(size / 1024 / 1024).toStringAsFixed(1)} MB)');

          // –ü–†–û–í–ï–†–Ø–ï–ú —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
          if (size < 100 * 1024) {
            print(
                '‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π: ${path.basename(localPath)} (${size} bytes)');
          }
        } else {
          print(
              '‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ${path.basename(localPath)}: HTTP ${response.statusCode}');
        }
      } catch (e) {
        print('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ${path.basename(localPath)}: $e');
      }
    }

    client.close();
    print('‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  }

  Future<void> _extractExecutablesFromAssets() async {
    final platformDir = Platform.isMacOS
        ? 'macos'
        : Platform.isWindows
            ? 'windows'
            : 'linux';
    print('–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: $platformDir');

    final assetManifest = await AssetManifest.loadFromAssetBundle(rootBundle);
    final assetKeys = assetManifest
        .listAssets()
        .where((key) => key.startsWith('assets/executables/$platformDir/'))
        .toList();

    print('–ù–∞–π–¥–µ–Ω–æ ${assetKeys.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è');

    for (final assetKey in assetKeys) {
      // –ü–†–û–ü–£–°–ö–ê–ï–ú —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏ - –æ–Ω–∏ —Ç–µ–ø–µ—Ä—å —Å–∫–∞—á–∏–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
      if (assetKey.contains('models-') &&
          (assetKey.endsWith('.bin') || assetKey.endsWith('.param'))) {
        print(
            '–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏: ${path.basename(assetKey)} (—Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)');
        continue;
      }

      final relativePath =
          assetKey.replaceFirst('assets/executables/$platformDir/', '');
      final targetPath =
          path.join(executablesDir.path, platformDir, relativePath);

      final targetDir = Directory(path.dirname(targetPath));
      if (!await targetDir.exists()) {
        await targetDir.create(recursive: true);
      }

      final byteData = await rootBundle.load(assetKey);
      final bytes = byteData.buffer.asUint8List();

      await File(targetPath).writeAsBytes(bytes);
      print('–ò–∑–≤–ª–µ—á–µ–Ω: $relativePath');
    }
  }

  Future<void> _makeExecutablesExecutable() async {
    if (!Platform.isWindows) {
      try {
        await Process.run('chmod', ['+x', waifu2xPath]);
        await Process.run('chmod', ['+x', ffmpegPath]);
        print('–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã —Å–¥–µ–ª–∞–Ω—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏');
      } catch (e) {
        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: $e');
      }
    }
  }

  Future<bool> validateInstallation() async {
    print('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤...');

    if (!await File(waifu2xPath).exists()) {
      print('‚ùå waifu2x –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return false;
    }

    if (!await File(ffmpegPath).exists()) {
      print('‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return false;
    }

    // –ù–û–í–û–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏
    if (!await _validateModelFiles()) {
      print('üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏ - –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...');

      // –ü–ï–†–ï–£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏
      await _downloadRealModelFiles();

      // –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º
      if (!await _validateModelFiles()) {
        print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏');
        return false;
      }
    }

    print('‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
    return true;
  }

  Future<bool> _validateModelFiles() async {
    print('üîç –ü–†–û–í–ï–†–ö–ê –†–ê–ó–ú–ï–†–û–í –§–ê–ô–õ–û–í –ú–û–î–ï–õ–ò');

    final modelTypes = ['cunet']; // –ü–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–µ–ª—å
    bool allValid = true;

    for (final modelType in modelTypes) {
      final modelPath = getModelPath(modelType);

      if (!await Directory(modelPath).exists()) {
        print('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥–µ–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $modelPath');
        allValid = false;
        continue;
      }

      final files = await Directory(modelPath)
          .list()
          .where((entity) =>
              entity is File &&
              (entity.path.endsWith('.bin') || entity.path.endsWith('.param')))
          .cast<File>()
          .toList();

      for (final file in files) {
        final size = await file.length();
        final name = path.basename(file.path);

        print('üìÑ $modelType/$name: ${(size / 1024).toStringAsFixed(1)} KB');

        // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 100KB
        if (size < 100 * 1024) {
          // –ú–µ–Ω—å—à–µ 100KB = –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ LFS pointer
          print('üö® –ü–û–í–†–ï–ñ–î–ï–ù–ù–´–ô –§–ê–ô–õ: $name (${size} bytes)');
          allValid = false;

          // –£–î–ê–õ–Ø–ï–ú –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
          await file.delete();
          print('üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: $name');
        }
      }
    }

    return allValid;
  }

  Future<Directory> _getApplicationSupportDirectory() async {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    if (Platform.isMacOS) {
      return Directory(path.join(Platform.environment['HOME']!, 'Library',
          'Application Support', 'com.example.videoUpscaler'));
    } else if (Platform.isWindows) {
      return Directory(
          path.join(Platform.environment['APPDATA']!, 'VideoUpscaler'));
    } else {
      return Directory(path.join(
          Platform.environment['HOME']!, '.local', 'share', 'video_upscaler'));
    }
  }

  Future<void> _cleanupExecutables() async {
    if (await executablesDir.exists()) {
      await executablesDir.delete(recursive: true);
      print('–û—á–∏—Å—Ç–∫–∞ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
  }
}
