import 'dart:io';
import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter/services.dart';
import 'package:path/path.dart' as path;
import 'package:path_provider/path_provider.dart';

class ExecutableManager {
  static ExecutableManager? _instance;
  static ExecutableManager get instance {
    _instance ??= ExecutableManager._internal();
    return _instance!;
  }

  ExecutableManager._internal();

  Directory? _workingDirectory;
  bool _isInitialized = false;
  bool _useSystemFFmpeg = false;
  Map<String, dynamic>? _hardwareProfile;

  bool get isInitialized => _isInitialized;

  String get modelsDir {
    _checkInitialization();
    return _workingDirectory!.path;
  }

  String get _platform {
    if (Platform.isMacOS) return 'macos';
    if (Platform.isWindows) return 'windows';
    return 'linux';
  }

  String get _executableExtension => Platform.isWindows ? '.exe' : '';

  String get waifu2xPath {
    if (!_isInitialized || _workingDirectory == null) {
      throw Exception('ExecutableManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
    }
    return path.join(
        _workingDirectory!.path, 'waifu2x-ncnn-vulkan$_executableExtension');
  }

  String get ffmpegPath {
    if (!_isInitialized || _workingDirectory == null) {
      throw Exception('ExecutableManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
    }

    if (_useSystemFFmpeg) {
      return _getSystemFFmpegPath();
    }
    return path.join(_workingDirectory!.path, 'ffmpeg$_executableExtension');
  }

  String get ffprobePath {
    if (!_isInitialized || _workingDirectory == null) {
      throw Exception('ExecutableManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
    }
    return path.join(_workingDirectory!.path, 'ffprobe$_executableExtension');
  }

  String getModelPath(String modelType) {
    _checkInitialization();
    final modelFolders = {
      'cunet': 'models-cunet',
      'anime': 'models-upconv_7_anime_style_art_rgb',
      'photo': 'models-upconv_7_photo',
    };

    final modelFolder = modelFolders[modelType] ?? 'models-cunet';
    return path.join(_workingDirectory!.path, modelFolder);
  }

  Future<void> initializeExecutables() async {
    if (_isInitialized) {
      print('‚úÖ ExecutableManager —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    print('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ ExecutableManager...');

    try {
      await _setupWorkingDirectory();
      await _detectHardwareProfile(); // –ù–û–í–û–ï: –¥–µ—Ç–µ–∫—Ü–∏—è –∂–µ–ª–µ–∑–∞
      await _extractFromAssets();
      await _makeExecutablesExecutable();

      _isInitialized = true;
      print('‚úÖ ExecutableManager –±–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

      await _validateExecutables();
      await _optimizeForHardware(); // –ù–û–í–û–ï: –∂–µ–ª–µ–∑–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è

      print(
          '‚úÖ ExecutableManager –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∂–µ–ª–µ–∑–∞');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ExecutableManager: $e');
      _isInitialized = false;
      rethrow;
    }
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –î–µ—Ç–µ–∫—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∂–µ–ª–µ–∑–∞
  Future<void> _detectHardwareProfile() async {
    print('üîç –ê–Ω–∞–ª–∏–∑ –∂–µ–ª–µ–∑–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');

    try {
      Map<String, dynamic> profile = {
        'cpu_cores': Platform.numberOfProcessors,
        'platform': _platform,
        'memory_gb': 16, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 16GB
        'gpu_type': 'unknown',
        'gpu_memory_gb': 8, // RTX 3070 = 8GB
        'is_high_performance': false,
      };

      if (Platform.isWindows) {
        profile = await _detectWindowsHardware(profile);
      } else if (Platform.isMacOS) {
        profile = await _detectMacHardware(profile);
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      final cpuCores = profile['cpu_cores'] as int;
      final gpuMemory = profile['gpu_memory_gb'] as int;

      profile['is_high_performance'] = cpuCores >= 8 && gpuMemory >= 6;
      profile['performance_tier'] = _getPerformanceTier(cpuCores, gpuMemory);

      _hardwareProfile = profile;

      print('üöÄ –ñ–µ–ª–µ–∑–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: ${profile['performance_tier']} tier');
      print(
          'üíæ CPU: ${cpuCores} —è–¥–µ—Ä, GPU: ${gpuMemory}GB, RAM: ${profile['memory_gb']}GB');
    } catch (e) {
      print(
          '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∂–µ–ª–µ–∑–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: $e');
      _hardwareProfile = {
        'cpu_cores': Platform.numberOfProcessors,
        'platform': _platform,
        'memory_gb': 8,
        'gpu_memory_gb': 4,
        'is_high_performance': false,
        'performance_tier': 'conservative',
      };
    }
  }

  Future<Map<String, dynamic>> _detectWindowsHardware(
      Map<String, dynamic> profile) async {
    try {
      // –î–µ—Ç–µ–∫—Ü–∏—è GPU —á–µ—Ä–µ–∑ wmic
      final gpuResult = await Process.run('wmic', [
        'path',
        'win32_VideoController',
        'get',
        'name,AdapterRAM',
        '/format:csv'
      ]);

      final gpuOutput = gpuResult.stdout.toString();
      print('üîç GPU –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: ${gpuOutput.split('\n').take(3).join(' | ')}');

      // –ü–∞—Ä—Å–∏–º RTX 3070
      if (gpuOutput.toLowerCase().contains('rtx 3070') ||
          gpuOutput.toLowerCase().contains('rtx 30')) {
        profile['gpu_type'] = 'rtx_3070';
        profile['gpu_memory_gb'] = 8;
        print(
            'üéÆ –û–±–Ω–∞—Ä—É–∂–µ–Ω RTX 3070 - –≤–∫–ª—é—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!');
      } else if (gpuOutput.toLowerCase().contains('rtx') ||
          gpuOutput.toLowerCase().contains('gtx')) {
        profile['gpu_type'] = 'nvidia_gpu';
        profile['gpu_memory_gb'] = 6; // –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
      }

      // –î–µ—Ç–µ–∫—Ü–∏—è RAM
      final memResult = await Process.run(
          'wmic', ['computersystem', 'get', 'TotalPhysicalMemory', '/value']);

      final memOutput = memResult.stdout.toString();
      final memMatch =
          RegExp(r'TotalPhysicalMemory=(\d+)').firstMatch(memOutput);

      if (memMatch != null) {
        final totalBytes = int.tryParse(memMatch.group(1) ?? '0') ?? 0;
        profile['memory_gb'] = (totalBytes / 1024 / 1024 / 1024).round();
      }

      return profile;
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ Windows –∂–µ–ª–µ–∑–∞: $e');
      return profile;
    }
  }

  Future<Map<String, dynamic>> _detectMacHardware(
      Map<String, dynamic> profile) async {
    try {
      // –î–µ—Ç–µ–∫—Ü–∏—è —á–µ—Ä–µ–∑ system_profiler
      final result =
          await Process.run('system_profiler', ['SPHardwareDataType', '-json']);

      final jsonData = json.decode(result.stdout);
      final hardware = jsonData['SPHardwareDataType'][0];

      final chipName =
          hardware['chip_type'] ?? hardware['cpu_type'] ?? 'Unknown';
      final memoryStr = hardware['physical_memory'] ?? '16 GB';

      print('üçé Mac –æ–±–Ω–∞—Ä—É–∂–µ–Ω: $chipName, RAM: $memoryStr');

      // –ü–∞—Ä—Å–∏–º –ø–∞–º—è—Ç—å
      final memMatch = RegExp(r'(\d+)\s*GB').firstMatch(memoryStr);
      if (memMatch != null) {
        profile['memory_gb'] = int.tryParse(memMatch.group(1) ?? '16') ?? 16;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∏–ø–∞
      if (chipName.toLowerCase().contains('m1') ||
          chipName.toLowerCase().contains('m2') ||
          chipName.toLowerCase().contains('m3')) {
        profile['gpu_type'] = 'apple_silicon';
        profile['gpu_memory_gb'] = profile['memory_gb']; // Unified memory
      }

      return profile;
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ Mac –∂–µ–ª–µ–∑–∞: $e');
      return profile;
    }
  }

  String _getPerformanceTier(int cpuCores, int gpuMemory) {
    if (cpuCores >= 12 && gpuMemory >= 8) {
      return 'BEAST_MODE'; // i9 + RTX 3070
    } else if (cpuCores >= 8 && gpuMemory >= 6) {
      return 'HIGH_PERFORMANCE';
    } else if (cpuCores >= 6 && gpuMemory >= 4) {
      return 'MEDIUM_PERFORMANCE';
    } else {
      return 'CONSERVATIVE';
    }
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∂–µ–ª–µ–∑–æ
  Future<void> _optimizeForHardware() async {
    if (_hardwareProfile == null) return;

    final tier = _hardwareProfile!['performance_tier'] as String;
    print('‚ö° –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —É—Ä–æ–≤–Ω—è: $tier');

    switch (tier) {
      case 'BEAST_MODE':
        await _applyBeastModeOptimizations();
        break;
      case 'HIGH_PERFORMANCE':
        await _applyHighPerformanceOptimizations();
        break;
      default:
        await _applyConservativeOptimizations();
    }
  }

  Future<void> _applyBeastModeOptimizations() async {
    print('üî• BEAST MODE –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è i9 + RTX 3070!');

    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —à–µ–π–¥–µ—Ä–æ–≤ Vulkan
    await _precompileVulkanShaders();

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if (Platform.isWindows) {
      await _optimizeWindowsForPerformance();
    }

    print('üöÄ BEAST MODE –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
  }

  Future<void> _precompileVulkanShaders() async {
    try {
      print('üîß –ü—Ä–µ–¥–∫–æ–º–ø–∏–ª—è—Ü–∏—è Vulkan —à–µ–π–¥–µ—Ä–æ–≤...');

      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–¥—Ä
      final testImagePath =
          path.join(_workingDirectory!.path, 'test_frame.png');
      final testOutputPath =
          path.join(_workingDirectory!.path, 'test_output.png');

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —á–µ—Ä–Ω—ã–π PNG 256x256
      await _createTestImage(testImagePath);

      // –ó–∞–ø—É—Å–∫–∞–µ–º waifu2x –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞
      final process = await Process.start(waifu2xPath, [
        '-i',
        testImagePath,
        '-o',
        testOutputPath,
        '-n',
        '0',
        '-s',
        '2',
        '-m',
        getModelPath('cunet'),
        '-t',
        '512',
        '-g',
        '0',
        '-v'
      ]);

      await process.exitCode.timeout(Duration(seconds: 30));

      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
      await File(testImagePath).delete().catchError((_) {});
      await File(testOutputPath).delete().catchError((_) {});

      print('‚úÖ Vulkan —à–µ–π–¥–µ—Ä—ã –ø—Ä–µ–¥–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (e) {
      print('‚ö†Ô∏è –ü—Ä–µ–¥–∫–æ–º–ø–∏–ª—è—Ü–∏—è —à–µ–π–¥–µ—Ä–æ–≤ –Ω–µ —É–¥–∞–ª–∞—Å—å: $e');
    }
  }

  Future<void> _createTestImage(String imagePath) async {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–µ–π—à–∏–π PNG –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
    const width = 256;
    const height = 256;

    final bytes = Uint8List(width * height * 3); // RGB
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ—Ä—ã–º —Ü–≤–µ—Ç–æ–º
    for (int i = 0; i < bytes.length; i += 3) {
      bytes[i] = 128; // R
      bytes[i + 1] = 128; // G
      bytes[i + 2] = 128; // B
    }

    // –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Å–ø–æ—Å–æ–± - –∏—Å–ø–æ–ª—å–∑—É–µ–º FFmpeg –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try {
      await Process.run(ffmpegPath, [
        '-f',
        'lavfi',
        '-i',
        'color=gray:size=256x256:duration=1',
        '-vframes',
        '1',
        '-y',
        imagePath
      ]);
    } catch (e) {
      print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: $e');
    }
  }

  Future<void> _optimizeWindowsForPerformance() async {
    try {
      print('üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Windows –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞
      await Process.run('wmic', [
        'process',
        'where',
        'name="flutter.exe"',
        'CALL',
        'setpriority',
        '128'
      ]).catchError((_) {}); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏

      print('‚úÖ Windows –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
    } catch (e) {
      print('‚ö†Ô∏è Windows –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å: $e');
    }
  }

  Future<void> _applyHighPerformanceOptimizations() async {
    print('‚ö° –ü—Ä–∏–º–µ–Ω—è–µ–º HIGH_PERFORMANCE –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏');
    // –ú–µ–Ω–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  }

  Future<void> _applyConservativeOptimizations() async {
    print('üêå –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏');
    // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  }

  /// –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã waifu2x –¥–ª—è –º–æ—â–Ω–æ–≥–æ –∂–µ–ª–µ–∑–∞
  List<String> getOptimalWaifu2xArgs({
    required String inputPath,
    required String outputPath,
    required String modelPath,
    required Map<String, dynamic> systemCapabilities,
    int scale = 2,
    int noise = 0,
    bool useGPU = true,
    bool enableTTA = false,
    String format = 'jpg', // JPG –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
  }) {
    final args = <String>[];

    // –í—Ö–æ–¥–Ω—ã–µ –∏ –≤—ã—Ö–æ–¥–Ω—ã–µ –ø—É—Ç–∏
    args.addAll(['-i', inputPath, '-o', outputPath]);

    // –£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ –∏ –º–∞—Å—à—Ç–∞–±
    args.addAll(['-n', noise.toString(), '-s', scale.toString()]);

    // –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
    args.addAll(['-m', modelPath]);

    // –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–¥ –º–æ—â–Ω–æ–µ –∂–µ–ª–µ–∑–æ
    final profile = _hardwareProfile ?? systemCapabilities;
    final tier = profile['performance_tier'] as String? ?? 'CONSERVATIVE';

    switch (tier) {
      case 'BEAST_MODE':
        args.addAll(_getBeastModeArgs(scale));
        break;
      case 'HIGH_PERFORMANCE':
        args.addAll(_getHighPerformanceArgs(scale));
        break;
      default:
        args.addAll(_getConservativeArgs(scale));
    }

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ TTA –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ (–µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–∞—á–µ—Å—Ç–≤–æ)
    if (!enableTTA) {
      args.add('-x');
    }

    // –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (JPG –±—ã—Å—Ç—Ä–µ–µ PNG)
    args.addAll(['-f', format]);

    // Verbose –≤—ã–≤–æ–¥
    args.add('-v');

    return args;
  }

  List<String> _getBeastModeArgs(int scale) {
    // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è i9 + RTX 3070
    return [
      '-g', '0', // GPU –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
      '-t', scale >= 4 ? '768' : '1024', // –û–ì–†–û–ú–ù–´–ï —Ç–∞–π–ª—ã –¥–ª—è RTX 3070 8GB
      '-j', '4:12:4', // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ 12 —è–¥–µ—Ä i9
    ];
  }

  List<String> _getHighPerformanceArgs(int scale) {
    // –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    return [
      '-g',
      '0',
      '-t',
      scale >= 4 ? '512' : '768',
      '-j',
      '3:8:3',
    ];
  }

  List<String> _getConservativeArgs(int scale) {
    // –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    return [
      '-g',
      '0',
      '-t',
      scale >= 4 ? '256' : '384',
      '-j',
      '2:4:2',
    ];
  }

  /// –ê–ì–†–ï–°–°–ò–í–ù–´–ï —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ—â–Ω–æ–≥–æ –∂–µ–ª–µ–∑–∞
  Map<String, dynamic> getRecommendedVideoSettings({
    required int videoWidth,
    required int videoHeight,
    required double videoDuration,
    required Map<String, dynamic> systemCapabilities,
  }) {
    final totalPixels = videoWidth * videoHeight;
    final profile = _hardwareProfile ?? systemCapabilities;
    final tier = profile['performance_tier'] as String? ?? 'CONSERVATIVE';

    // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ—â–Ω–æ–≥–æ –∂–µ–ª–µ–∑–∞
    int recommendedScale = 2;
    int recommendedNoise = 0;
    String recommendedFormat = 'jpg'; // –ë—ã—Å—Ç—Ä–µ–µ PNG

    switch (tier) {
      case 'BEAST_MODE':
        // i9 + RTX 3070 –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å 4K –±–µ–∑ –ø—Ä–æ–±–ª–µ–º
        if (totalPixels <= 2560 * 1440) {
          recommendedScale = 4; // 4K –¥–ª—è 1440p –∏ –Ω–∏–∂–µ
        }
        if (totalPixels <= 1920 * 1080) {
          recommendedNoise = 1; // –ú–æ–∂–µ–º –ø–æ–∑–≤–æ–ª–∏—Ç—å —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ
        }
        break;

      case 'HIGH_PERFORMANCE':
        if (totalPixels <= 1920 * 1080) {
          recommendedScale = 4;
        }
        if (totalPixels <= 1280 * 720) {
          recommendedNoise = 1;
        }
        break;

      default:
        // –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å
        break;
    }

    // –î–ª—è –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
    if (videoDuration > 60) {
      recommendedFormat = 'jpg';
      recommendedNoise = 0; // –£–±–∏—Ä–∞–µ–º —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    }

    return {
      'scale': recommendedScale,
      'noise': recommendedNoise,
      'format': recommendedFormat,
      'use_gpu': true,
      'enable_tta': false, // –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
      'estimated_time_minutes': _estimateProcessingTimeOptimized(
        totalPixels,
        videoDuration,
        recommendedScale,
        profile,
      ),
      'performance_tier': tier,
    };
  }

  /// –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –º–æ—â–Ω–æ–≥–æ –∂–µ–ª–µ–∑–∞
  double _estimateProcessingTimeOptimized(
    int totalPixels,
    double videoDuration,
    int scale,
    Map<String, dynamic> capabilities,
  ) {
    final tier = capabilities['performance_tier'] as String? ?? 'CONSERVATIVE';
    final cpuCores = capabilities['cpu_cores'] as int? ?? 4;
    final gpuMemory = capabilities['gpu_memory_gb'] as int? ?? 4;

    // –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞ –ø–∏–∫—Å–µ–ª—å –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    double baseTimePerPixel;

    switch (tier) {
      case 'BEAST_MODE':
        // RTX 3070 + i9: –û–ß–ï–ù–¨ –±—ã—Å—Ç—Ä–æ
        baseTimePerPixel = 0.02; // –í 5 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ –æ–±—ã—á–Ω–æ–≥–æ GPU
        break;
      case 'HIGH_PERFORMANCE':
        baseTimePerPixel = 0.05;
        break;
      default:
        baseTimePerPixel = 0.1;
        break;
    }

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–¥ –º–∞—Å—à—Ç–∞–± (–º–µ–Ω–µ–µ –ø–µ–Ω–∞–ª–∏–∑–∏—Ä—É—é—â–∞—è –¥–ª—è –º–æ—â–Ω–æ–≥–æ –∂–µ–ª–µ–∑–∞)
    double scaleMultiplier;
    switch (scale) {
      case 4:
        scaleMultiplier = tier == 'BEAST_MODE'
            ? 2.5
            : 4.0; // –ú–µ–Ω—å—à–µ —à—Ç—Ä–∞—Ñ–∞ –∑–∞ 4x –Ω–∞ –º–æ—â–Ω–æ–º –∂–µ–ª–µ–∑–µ
        break;
      case 2:
        scaleMultiplier = 1.0;
        break;
      default:
        scaleMultiplier = 0.8;
    }

    baseTimePerPixel *= scaleMultiplier;

    // –û–±—â–µ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–¥—Ä–æ–≤
    final fps = 30; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 30 fps
    final totalFrames = videoDuration * fps;
    final totalTimeSeconds =
        (totalPixels * totalFrames * baseTimePerPixel) / 1000000;

    final estimatedMinutes = totalTimeSeconds / 60;

    print(
        '‚è±Ô∏è –û—Ü–µ–Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ ($tier): ${estimatedMinutes.toStringAsFixed(1)} –º–∏–Ω—É—Ç');

    return estimatedMinutes;
  }

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
  Future<void> _setupWorkingDirectory() async {
    final cacheDir = await getTemporaryDirectory();
    _workingDirectory =
        Directory(path.join(cacheDir.path, 'video_upscaler_executables'));

    if (!await _workingDirectory!.exists()) {
      await _workingDirectory!.create(recursive: true);
    }

    print('üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${_workingDirectory!.path}');
  }

  Future<void> _extractFromAssets() async {
    try {
      print('üì• –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ assets –¥–ª—è $_platform...');

      await _extractExecutable('ffmpeg');
      if (!Platform.isMacOS) {
        await _extractExecutable('ffprobe');
      }
      await _extractExecutable('waifu2x-ncnn-vulkan');

      await _extractModelFolder('models-cunet');
      await _extractModelFolder('models-upconv_7_anime_style_art_rgb');
      await _extractModelFolder('models-upconv_7_photo');

      print('‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã: $e');
    }
  }

  Future<void> _extractExecutable(String fileName) async {
    try {
      final assetPath =
          'assets/executables/$_platform/$fileName$_executableExtension';
      final targetPath =
          path.join(_workingDirectory!.path, '$fileName$_executableExtension');

      print('üì¶ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ $fileName...');

      final data = await rootBundle.load(assetPath);
      final bytes = data.buffer.asUint8List();

      await File(targetPath).writeAsBytes(bytes);

      final sizeMB = (bytes.length / 1024 / 1024).toStringAsFixed(1);
      print('‚úÖ $fileName –∏–∑–≤–ª–µ—á–µ–Ω: $sizeMB MB');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è $fileName: $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å $fileName: $e');
    }
  }

  Future<void> _extractModelFolder(String folderName) async {
    try {
      final modelsDir =
          Directory(path.join(_workingDirectory!.path, folderName));
      await modelsDir.create(recursive: true);

      final manifestContent = await rootBundle.loadString('AssetManifest.json');
      final Map<String, dynamic> manifestMap = json.decode(manifestContent);

      final modelFiles = manifestMap.keys
          .where((String key) =>
              key.startsWith('assets/executables/$_platform/$folderName/'))
          .where((String key) => !key.endsWith('/'))
          .toList();

      print('üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ $folderName: ${modelFiles.length}');

      int extractedCount = 0;
      for (final assetPath in modelFiles) {
        try {
          final fileName = path.basename(assetPath);
          final targetPath = path.join(modelsDir.path, fileName);

          final data = await rootBundle.load(assetPath);
          final bytes = data.buffer.asUint8List();

          await File(targetPath).writeAsBytes(bytes);

          final sizeMB = (bytes.length / 1024 / 1024).toStringAsFixed(1);
          print('üìÑ –ò–∑–≤–ª–µ—á—ë–Ω: $fileName ($sizeMB MB)');
          extractedCount++;
        } catch (e) {
          print('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ${path.basename(assetPath)}: $e');
        }
      }

      if (extractedCount == 0) {
        print('üîÑ Fallback - –∏—â–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏ $folderName...');
        await _extractBasicModelFiles(folderName, modelsDir);
      }

      print('‚úÖ –ü–∞–ø–∫–∞ $folderName —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∞: $extractedCount —Ñ–∞–π–ª–æ–≤');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞–ø–∫–∏ $folderName: $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–∞–ø–∫—É $folderName: $e');
    }
  }

  Future<void> _extractBasicModelFiles(
      String folderName, Directory modelsDir) async {
    final baseFiles = [
      'noise0_scale2.0x_model.bin',
      'noise0_scale2.0x_model.param',
      'noise1_scale2.0x_model.bin',
      'noise1_scale2.0x_model.param',
      'noise2_scale2.0x_model.bin',
      'noise2_scale2.0x_model.param',
      'noise3_scale2.0x_model.bin',
      'noise3_scale2.0x_model.param',
      'scale2.0x_model.bin',
      'scale2.0x_model.param',
      'noise0_model.bin',
      'noise0_model.param',
      'noise1_model.bin',
      'noise1_model.param',
      'noise2_model.bin',
      'noise2_model.param',
      'noise3_model.bin',
      'noise3_model.param',
    ];

    bool foundAny = false;

    for (final baseFile in baseFiles) {
      try {
        final assetPath = 'assets/executables/$_platform/$folderName/$baseFile';
        final data = await rootBundle.load(assetPath);
        final bytes = data.buffer.asUint8List();

        final targetPath = path.join(modelsDir.path, baseFile);
        await File(targetPath).writeAsBytes(bytes);

        final sizeMB = (bytes.length / 1024 / 1024).toStringAsFixed(1);
        print('üìÑ –ù–∞–π–¥–µ–Ω –±–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª: $baseFile ($sizeMB MB)');
        foundAny = true;
      } catch (e) {
        // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      }
    }

    if (!foundAny) {
      print('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã .bin —Ñ–∞–π–ª—ã –¥–ª—è $folderName');
    }
  }

  Future<void> _makeExecutablesExecutable() async {
    if (Platform.isWindows) {
      print('‚ÑπÔ∏è Windows: –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
      return;
    }

    try {
      print('üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...');

      final executables = [
        path.join(_workingDirectory!.path,
            'waifu2x-ncnn-vulkan$_executableExtension'),
        path.join(_workingDirectory!.path, 'ffmpeg$_executableExtension'),
      ];

      if (!Platform.isMacOS) {
        executables.add(
            path.join(_workingDirectory!.path, 'ffprobe$_executableExtension'));
      }

      for (final execPath in executables) {
        if (await File(execPath).exists()) {
          await _makeExecutableFile(execPath);
        }
      }

      print('‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: $e');
    }
  }

  Future<void> _makeExecutableFile(String filePath) async {
    try {
      final fileName = path.basename(filePath);

      if (Platform.isMacOS) {
        await Process.run('xattr', ['-c', filePath])
            .catchError((e) => ProcessResult(0, 0, '', ''));
      }

      await Process.run('chmod', ['+x', filePath]);
      print('‚úÖ –ü—Ä–∞–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è $fileName');
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤ –¥–ª—è ${path.basename(filePath)}: $e');
    }
  }

  Future<void> _validateExecutables() async {
    print('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤...');

    try {
      final ffmpegPath =
          path.join(_workingDirectory!.path, 'ffmpeg$_executableExtension');
      final ffmpegWorks = await _testExecutable(ffmpegPath, ['-version']);

      if (!ffmpegWorks && (Platform.isMacOS || Platform.isLinux)) {
        print('‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π FFmpeg –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π...');

        final systemFFmpeg = _getSystemFFmpegPath();
        if (await File(systemFFmpeg).exists()) {
          final systemWorks = await _testExecutable(systemFFmpeg, ['-version']);
          if (systemWorks) {
            _useSystemFFmpeg = true;
            print('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–π FFmpeg: $systemFFmpeg');
          }
        }
      }

      final waifu2xPath = path.join(
          _workingDirectory!.path, 'waifu2x-ncnn-vulkan$_executableExtension');
      final waifu2xWorks = await _testExecutable(waifu2xPath, ['-h']);
      if (!waifu2xWorks) {
        print('‚ö†Ô∏è waifu2x –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      }

      await _validateModels();

      print('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: $e');
    }
  }

  Future<void> _validateModels() async {
    print('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π –ò–ò...');

    final modelDirs = [
      'models-cunet',
      'models-upconv_7_anime_style_art_rgb',
      'models-upconv_7_photo'
    ];

    for (final modelDir in modelDirs) {
      final modelPath = path.join(_workingDirectory!.path, modelDir);
      final dir = Directory(modelPath);

      if (!await dir.exists()) {
        print('‚ùå –ü–∞–ø–∫–∞ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $modelDir');
        continue;
      }

      final files = await dir.list().toList();
      final binFiles = files.where((f) => f.path.endsWith('.bin')).toList();
      final paramFiles = files.where((f) => f.path.endsWith('.param')).toList();

      print(
          'üìÅ $modelDir: .bin=${binFiles.length}, .param=${paramFiles.length}');

      if (binFiles.isEmpty && paramFiles.isNotEmpty) {
        print('‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç .bin —Ñ–∞–π–ª—ã –≤ $modelDir - —Ç–æ–ª—å–∫–æ .param —Ñ–∞–π–ª—ã');
      } else if (binFiles.isNotEmpty && paramFiles.isNotEmpty) {
        print('‚úÖ $modelDir: –Ω–∞–π–¥–µ–Ω—ã –∏ .bin, –∏ .param —Ñ–∞–π–ª—ã');
      } else {
        print('‚ùå $modelDir: –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    }
  }

  Future<bool> _testExecutable(String execPath, List<String> args) async {
    try {
      if (!await File(execPath).exists()) {
        return false;
      }

      final result = await Process.run(execPath, args)
          .timeout(const Duration(seconds: 10));

      return result.exitCode == 0 || result.exitCode == 1;
    } catch (e) {
      return false;
    }
  }

  String _getSystemFFmpegPath() {
    final systemPaths = [
      '/opt/homebrew/bin/ffmpeg',
      '/usr/local/bin/ffmpeg',
      '/usr/bin/ffmpeg',
    ];

    for (final systemPath in systemPaths) {
      if (File(systemPath).existsSync()) {
        return systemPath;
      }
    }

    return path.join(_workingDirectory!.path, 'ffmpeg$_executableExtension');
  }

  Future<void> cleanupExecutables() async {
    if (_workingDirectory != null && await _workingDirectory!.exists()) {
      await _workingDirectory!.delete(recursive: true);
      _isInitialized = false;
      _useSystemFFmpeg = false;
      print('üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã: ${_workingDirectory!.path}');
    }
  }

  void _checkInitialization() {
    if (!_isInitialized) {
      throw Exception(
          'ExecutableManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –í—ã–∑–æ–≤–∏—Ç–µ initializeExecutables() —Å–Ω–∞—á–∞–ª–∞.');
    }
  }

  Future<bool> validateInstallation() async {
    if (!_isInitialized) return false;

    try {
      final waifu2xExists = await File(waifu2xPath).exists();
      final ffmpegExists = await File(ffmpegPath).exists();

      if (!waifu2xExists || !ffmpegExists) {
        return false;
      }

      final modelDirs = [
        'models-cunet',
        'models-upconv_7_anime_style_art_rgb',
        'models-upconv_7_photo'
      ];

      for (final modelDir in modelDirs) {
        final modelPath = path.join(_workingDirectory!.path, modelDir);
        final dir = Directory(modelPath);

        if (!await dir.exists()) {
          return false;
        }

        final files = await dir.list().toList();
        final modelFiles = files
            .where((f) => f.path.endsWith('.bin') || f.path.endsWith('.param'))
            .toList();

        if (modelFiles.isEmpty) {
          return false;
        }
      }

      return true;
    } catch (e) {
      return false;
    }
  }

  Map<String, dynamic> getConfigurationInfo() {
    return {
      'isInitialized': _isInitialized,
      'useSystemFFmpeg': _useSystemFFmpeg,
      'workingDirectory': _workingDirectory?.path,
      'platform': _platform,
      'ffmpegPath': _isInitialized ? ffmpegPath : null,
      'waifu2xPath': _isInitialized ? waifu2xPath : null,
      'hardwareProfile': _hardwareProfile,
    };
  }
}
