import 'dart:io';
import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter/services.dart';
import 'package:path/path.dart' as path;
import 'package:path_provider/path_provider.dart';

class ExecutableManager {
  static ExecutableManager? _instance;
  static ExecutableManager get instance {
    _instance ??= ExecutableManager._internal();
    return _instance!;
  }

  ExecutableManager._internal();

  Directory? _workingDirectory;
  bool _isInitialized = false;
  bool _useSystemFFmpeg = false;

  bool get isInitialized => _isInitialized;

  String get _platform {
    if (Platform.isMacOS) return 'macos';
    if (Platform.isWindows) return 'windows';
    return 'linux';
  }

  String get _executableExtension => Platform.isWindows ? '.exe' : '';

  String get waifu2xPath {
    if (!_isInitialized || _workingDirectory == null) {
      throw Exception('ExecutableManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
    }
    return path.join(
        _workingDirectory!.path, 'waifu2x-ncnn-vulkan$_executableExtension');
  }

  String get ffmpegPath {
    if (!_isInitialized || _workingDirectory == null) {
      throw Exception('ExecutableManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
    }

    if (_useSystemFFmpeg) {
      return _getSystemFFmpegPath();
    }
    return path.join(_workingDirectory!.path, 'ffmpeg$_executableExtension');
  }

  String get ffprobePath {
    if (!_isInitialized || _workingDirectory == null) {
      throw Exception('ExecutableManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
    }
    return path.join(_workingDirectory!.path, 'ffprobe$_executableExtension');
  }

  String get modelsDir {
    _checkInitialization();
    return _workingDirectory!.path;
  }

  String getModelPath(String modelType) {
    _checkInitialization();
    final modelFolders = {
      'cunet': 'models-cunet',
      'anime': 'models-upconv_7_anime_style_art_rgb',
      'photo': 'models-upconv_7_photo',
    };

    final modelFolder = modelFolders[modelType] ?? 'models-cunet';
    return path.join(_workingDirectory!.path, modelFolder);
  }

  Future<void> initializeExecutables() async {
    if (_isInitialized) {
      print('‚úÖ ExecutableManager —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    print('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ExecutableManager...');

    try {
      await _setupWorkingDirectory();
      await _extractFromAssets();
      await _makeExecutablesExecutable();

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –î–û –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      _isInitialized = true;
      print('‚úÖ ExecutableManager –±–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

      // –¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å
      await _validateExecutables();

      print('‚úÖ ExecutableManager –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ExecutableManager: $e');
      _isInitialized = false;
      rethrow;
    }
  }

  Future<void> _setupWorkingDirectory() async {
    final cacheDir = await getTemporaryDirectory();
    _workingDirectory =
        Directory(path.join(cacheDir.path, 'video_upscaler_executables'));

    if (!await _workingDirectory!.exists()) {
      await _workingDirectory!.create(recursive: true);
    }

    print('üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${_workingDirectory!.path}');
  }

  Future<void> _extractFromAssets() async {
    try {
      print('üì• –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ assets –¥–ª—è $_platform...');

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã
      await _extractExecutable('ffmpeg');
      if (!Platform.isMacOS) {
        await _extractExecutable('ffprobe');
      }
      await _extractExecutable('waifu2x-ncnn-vulkan');

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞–ø–∫–∏ —Å –º–æ–¥–µ–ª—è–º–∏
      await _extractModelFolder('models-cunet');
      await _extractModelFolder('models-upconv_7_anime_style_art_rgb');
      await _extractModelFolder('models-upconv_7_photo');

      print('‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã: $e');
    }
  }

  Future<void> _extractExecutable(String fileName) async {
    try {
      final assetPath =
          'assets/executables/$_platform/$fileName$_executableExtension';
      final targetPath =
          path.join(_workingDirectory!.path, '$fileName$_executableExtension');

      print('üì¶ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ $fileName...');

      final data = await rootBundle.load(assetPath);
      final bytes = data.buffer.asUint8List();

      await File(targetPath).writeAsBytes(bytes);

      final sizeMB = (bytes.length / 1024 / 1024).toStringAsFixed(1);
      print('‚úÖ $fileName –∏–∑–≤–ª–µ—á–µ–Ω: $sizeMB MB');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è $fileName: $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å $fileName: $e');
    }
  }

  Future<void> _extractModelFolder(String folderName) async {
    try {
      // –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –º–æ–¥–µ–ª–µ–π
      final modelsDir =
          Directory(path.join(_workingDirectory!.path, folderName));
      await modelsDir.create(recursive: true);

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ –º–æ–¥–µ–ª–∏
      final manifestContent = await rootBundle.loadString('AssetManifest.json');
      final Map<String, dynamic> manifestMap = json.decode(manifestContent);

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–∞–ø–∫–µ
      final modelFiles = manifestMap.keys
          .where((String key) =>
              key.startsWith('assets/executables/$_platform/$folderName/'))
          .where((String key) => !key.endsWith('/')) // –ò—Å–∫–ª—é—á–∞–µ–º –ø–∞–ø–∫–∏
          .toList();

      print('üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ $folderName: ${modelFiles.length}');

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
      int extractedCount = 0;
      for (final assetPath in modelFiles) {
        try {
          final fileName = path.basename(assetPath);
          final targetPath = path.join(modelsDir.path, fileName);

          final data = await rootBundle.load(assetPath);
          final bytes = data.buffer.asUint8List();

          await File(targetPath).writeAsBytes(bytes);

          final sizeMB = (bytes.length / 1024 / 1024).toStringAsFixed(1);
          print('üìÑ –ò–∑–≤–ª–µ—á—ë–Ω: $fileName ($sizeMB MB)');
          extractedCount++;
        } catch (e) {
          print('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ${path.basename(assetPath)}: $e');
        }
      }

      // –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
      if (extractedCount == 0) {
        print('üîÑ Fallback - –∏—â–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏ $folderName...');
        await _extractBasicModelFiles(folderName, modelsDir);
      }

      print('‚úÖ –ü–∞–ø–∫–∞ $folderName —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∞: $extractedCount —Ñ–∞–π–ª–æ–≤');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞–ø–∫–∏ $folderName: $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–∞–ø–∫—É $folderName: $e');
    }
  }

  Future<void> _extractBasicModelFiles(
      String folderName, Directory modelsDir) async {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
    final baseFiles = [
      'noise0_scale2.0x_model.bin',
      'noise0_scale2.0x_model.param',
      'noise1_scale2.0x_model.bin',
      'noise1_scale2.0x_model.param',
      'noise2_scale2.0x_model.bin',
      'noise2_scale2.0x_model.param',
      'noise3_scale2.0x_model.bin',
      'noise3_scale2.0x_model.param',
      'scale2.0x_model.bin',
      'scale2.0x_model.param',
      'noise0_model.bin',
      'noise0_model.param',
      'noise1_model.bin',
      'noise1_model.param',
      'noise2_model.bin',
      'noise2_model.param',
      'noise3_model.bin',
      'noise3_model.param',
    ];

    bool foundAny = false;

    for (final baseFile in baseFiles) {
      try {
        final assetPath = 'assets/executables/$_platform/$folderName/$baseFile';
        final data = await rootBundle.load(assetPath);
        final bytes = data.buffer.asUint8List();

        final targetPath = path.join(modelsDir.path, baseFile);
        await File(targetPath).writeAsBytes(bytes);

        final sizeMB = (bytes.length / 1024 / 1024).toStringAsFixed(1);
        print('üìÑ –ù–∞–π–¥–µ–Ω –±–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª: $baseFile ($sizeMB MB)');
        foundAny = true;
      } catch (e) {
        // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      }
    }

    if (!foundAny) {
      print('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã .bin —Ñ–∞–π–ª—ã –¥–ª—è $folderName');
    }
  }

  Future<void> _makeExecutablesExecutable() async {
    if (Platform.isWindows) {
      print('‚ÑπÔ∏è Windows: –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
      return;
    }

    try {
      print('üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...');

      final executables = [
        path.join(_workingDirectory!.path,
            'waifu2x-ncnn-vulkan$_executableExtension'),
        path.join(_workingDirectory!.path, 'ffmpeg$_executableExtension'),
      ];

      if (!Platform.isMacOS) {
        executables.add(
            path.join(_workingDirectory!.path, 'ffprobe$_executableExtension'));
      }

      for (final execPath in executables) {
        if (await File(execPath).exists()) {
          await _makeExecutableFile(execPath);
        }
      }

      print('‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: $e');
    }
  }

  Future<void> _makeExecutableFile(String filePath) async {
    try {
      final fileName = path.basename(filePath);

      if (Platform.isMacOS) {
        // –£–±–∏—Ä–∞–µ–º quarantine –∞—Ç—Ä–∏–±—É—Ç—ã
        await Process.run('xattr', ['-c', filePath])
            .catchError((e) => ProcessResult(0, 0, '', ''));
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
      await Process.run('chmod', ['+x', filePath]);
      print('‚úÖ –ü—Ä–∞–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è $fileName');
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤ –¥–ª—è ${path.basename(filePath)}: $e');
    }
  }

  Future<void> _validateExecutables() async {
    print('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤...');

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ FFmpeg
      final ffmpegPath =
          path.join(_workingDirectory!.path, 'ffmpeg$_executableExtension');
      final ffmpegWorks = await _testExecutable(ffmpegPath, ['-version']);

      if (!ffmpegWorks && (Platform.isMacOS || Platform.isLinux)) {
        print('‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π FFmpeg –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π...');

        final systemFFmpeg = _getSystemFFmpegPath();
        if (await File(systemFFmpeg).exists()) {
          final systemWorks = await _testExecutable(systemFFmpeg, ['-version']);
          if (systemWorks) {
            _useSystemFFmpeg = true;
            print('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–π FFmpeg: $systemFFmpeg');
          }
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ waifu2x
      final waifu2xPath = path.join(
          _workingDirectory!.path, 'waifu2x-ncnn-vulkan$_executableExtension');
      final waifu2xWorks = await _testExecutable(waifu2xPath, ['-h']);
      if (!waifu2xWorks) {
        print('‚ö†Ô∏è waifu2x –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏
      await _validateModels();

      print('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: $e');
    }
  }

  Future<void> _validateModels() async {
    print('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π –ò–ò...');

    final modelDirs = [
      'models-cunet',
      'models-upconv_7_anime_style_art_rgb',
      'models-upconv_7_photo'
    ];

    for (final modelDir in modelDirs) {
      final modelPath = path.join(_workingDirectory!.path, modelDir);
      final dir = Directory(modelPath);

      if (!await dir.exists()) {
        print('‚ùå –ü–∞–ø–∫–∞ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $modelDir');
        continue;
      }

      final files = await dir.list().toList();
      final binFiles = files.where((f) => f.path.endsWith('.bin')).toList();
      final paramFiles = files.where((f) => f.path.endsWith('.param')).toList();

      print(
          'üìÅ $modelDir: .bin=${binFiles.length}, .param=${paramFiles.length}');

      if (binFiles.isEmpty && paramFiles.isNotEmpty) {
        print('‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç .bin —Ñ–∞–π–ª—ã –≤ $modelDir - —Ç–æ–ª—å–∫–æ .param —Ñ–∞–π–ª—ã');
      } else if (binFiles.isNotEmpty && paramFiles.isNotEmpty) {
        print('‚úÖ $modelDir: –Ω–∞–π–¥–µ–Ω—ã –∏ .bin, –∏ .param —Ñ–∞–π–ª—ã');
      } else {
        print('‚ùå $modelDir: –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    }
  }

  Future<bool> _testExecutable(String execPath, List<String> args) async {
    try {
      if (!await File(execPath).exists()) {
        return false;
      }

      final result = await Process.run(execPath, args)
          .timeout(const Duration(seconds: 10));

      return result.exitCode == 0 || result.exitCode == 1;
    } catch (e) {
      return false;
    }
  }

  String _getSystemFFmpegPath() {
    final systemPaths = [
      '/opt/homebrew/bin/ffmpeg',
      '/usr/local/bin/ffmpeg',
      '/usr/bin/ffmpeg',
    ];

    for (final systemPath in systemPaths) {
      if (File(systemPath).existsSync()) {
        return systemPath;
      }
    }

    return path.join(_workingDirectory!.path, 'ffmpeg$_executableExtension');
  }

  // –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò

  /// –ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã waifu2x –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∂–µ–ª–µ–∑–∞
  List<String> getOptimalWaifu2xArgs({
    required String inputPath,
    required String outputPath,
    required String modelPath,
    required Map<String, dynamic> systemCapabilities,
    int scale = 2,
    int noise = 0,
    bool useGPU = true,
    bool enableTTA = false,
    String format = 'png',
  }) {
    final args = <String>[];

    // –í—Ö–æ–¥–Ω—ã–µ –∏ –≤—ã—Ö–æ–¥–Ω—ã–µ –ø—É—Ç–∏
    args.addAll(['-i', inputPath, '-o', outputPath]);

    // –£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ –∏ –º–∞—Å—à—Ç–∞–±
    args.addAll(['-n', noise.toString(), '-s', scale.toString()]);

    // –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
    args.addAll(['-m', modelPath]);

    // GPU/CPU –≤—ã–±–æ—Ä
    final gpuId = _getOptimalGPUId(systemCapabilities, useGPU);
    args.addAll(['-g', gpuId.toString()]);

    // –†–∞–∑–º–µ—Ä —Ç–∞–π–ª–∞
    final tileSize = _getOptimalTileSize(systemCapabilities, scale);
    args.addAll(['-t', tileSize.toString()]);

    // –ü–æ—Ç–æ–∫–∏
    final threadConfig = _getOptimalThreadConfig(systemCapabilities);
    args.addAll(['-j', threadConfig]);

    // TTA —Ä–µ–∂–∏–º (–¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ vs —Å–∫–æ—Ä–æ—Å—Ç–∏)
    if (enableTTA) {
      args.add('-x');
    }

    // –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
    args.addAll(['-f', format]);

    // Verbose –≤—ã–≤–æ–¥
    args.add('-v');

    return args;
  }

  /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π GPU ID
  int _getOptimalGPUId(Map<String, dynamic> capabilities, bool useGPU) {
    if (!useGPU) return -1;

    final hasGPU = capabilities['has_vulkan'] as bool? ?? false;
    final gpuCount = (capabilities['available_gpus'] as List?)?.length ?? 0;

    if (hasGPU && gpuCount > 0) {
      return 0; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π GPU
    }

    return -1; // Fallback –Ω–∞ CPU
  }

  /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–∞–π–ª–∞
  int _getOptimalTileSize(Map<String, dynamic> capabilities, int scale) {
    final memoryInfo =
        capabilities['memory_info'] as Map<String, dynamic>? ?? {};
    final totalMemoryGB = memoryInfo['total_gb'] as int? ?? 8;
    final hasGPU = capabilities['has_vulkan'] as bool? ?? false;

    // –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Ç–∞–π–ª–∞
    int baseTileSize = 32;

    if (hasGPU) {
      // –î–ª—è GPU –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø–æ–¥ –ø–∞–º—è—Ç—å
      if (totalMemoryGB >= 32) {
        baseTileSize = 400;
      } else if (totalMemoryGB >= 16) {
        baseTileSize = 256;
      } else if (totalMemoryGB >= 8) {
        baseTileSize = 128;
      } else {
        baseTileSize = 64;
      }
    } else {
      // –î–ª—è CPU –º–µ–Ω—å—à–∏–µ —Ç–∞–π–ª—ã
      if (totalMemoryGB >= 16) {
        baseTileSize = 128;
      } else if (totalMemoryGB >= 8) {
        baseTileSize = 64;
      } else {
        baseTileSize = 32;
      }
    }

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–¥ –º–∞—Å—à—Ç–∞–±
    if (scale >= 4) {
      baseTileSize = (baseTileSize * 0.7).round();
    }

    return baseTileSize;
  }

  /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ—Ç–æ–∫–æ–≤
  String _getOptimalThreadConfig(Map<String, dynamic> capabilities) {
    final cpuCores = capabilities['cpu_cores'] as int? ?? 4;
    final hasGPU = capabilities['has_vulkan'] as bool? ?? false;

    int loadThreads, procThreads, saveThreads;

    if (hasGPU) {
      // –î–ª—è GPU –º–µ–Ω—å—à–µ –ø–æ—Ç–æ–∫–æ–≤ –Ω—É–∂–Ω–æ
      loadThreads = (cpuCores * 0.25).round().clamp(1, 4);
      procThreads = (cpuCores * 0.5).round().clamp(1, 8);
      saveThreads = (cpuCores * 0.25).round().clamp(1, 4);
    } else {
      // –î–ª—è CPU –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–µ –ø–æ—Ç–æ–∫–æ–≤
      loadThreads = (cpuCores * 0.3).round().clamp(1, 4);
      procThreads = (cpuCores * 0.6).round().clamp(2, 16);
      saveThreads = (cpuCores * 0.3).round().clamp(1, 4);
    }

    return '$loadThreads:$procThreads:$saveThreads';
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ
  Map<String, dynamic> getRecommendedVideoSettings({
    required int videoWidth,
    required int videoHeight,
    required double videoDuration,
    required Map<String, dynamic> systemCapabilities,
  }) {
    final totalPixels = videoWidth * videoHeight;
    final memoryInfo =
        systemCapabilities['memory_info'] as Map<String, dynamic>? ?? {};
    final memoryGB = memoryInfo['total_gb'] as int? ?? 8;
    final hasGPU = systemCapabilities['has_vulkan'] as bool? ?? false;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–±
    int recommendedScale = 2;
    if (totalPixels <= 1920 * 1080 && memoryGB >= 16) {
      recommendedScale = 4; // 4K –¥–ª—è Full HD –∏ –≤—ã—à–µ
    } else if (totalPixels <= 1280 * 720 && memoryGB >= 8) {
      recommendedScale = 4; // 4K –¥–ª—è HD
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º noise level
    int recommendedNoise = 0;
    if (totalPixels <= 1280 * 720) {
      recommendedNoise = 1; // –ë–æ–ª—å—à–µ —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –Ω–∏–∑–∫–∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç
    String recommendedFormat = 'png';
    if (videoDuration > 30) {
      recommendedFormat = 'jpg'; // –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ - –∫–æ–º–ø—Ä–µ—Å—Å–∏—è
    }

    return {
      'scale': recommendedScale,
      'noise': recommendedNoise,
      'format': recommendedFormat,
      'use_gpu': hasGPU,
      'enable_tta': false, // –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
      'estimated_time_minutes': _estimateProcessingTime(
        videoWidth * videoHeight,
        videoDuration,
        recommendedScale,
        systemCapabilities,
      ),
    };
  }

  /// –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  double _estimateProcessingTime(
    int totalPixels,
    double videoDuration,
    int scale,
    Map<String, dynamic> capabilities,
  ) {
    final hasGPU = capabilities['has_vulkan'] as bool? ?? false;
    final cpuCores = capabilities['cpu_cores'] as int? ?? 4;

    // –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞ –ø–∏–∫—Å–µ–ª—å (–≤ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞—Ö)
    double baseTimePerPixel = hasGPU ? 0.1 : 0.5;

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–¥ –º–∞—Å—à—Ç–∞–±
    baseTimePerPixel *= scale * scale;

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–¥ CPU
    if (!hasGPU) {
      baseTimePerPixel /= (cpuCores / 4).clamp(0.5, 2.0);
    }

    // –û–±—â–µ–µ –≤—Ä–µ–º—è
    final totalTimeSeconds =
        (totalPixels * videoDuration * baseTimePerPixel) / 1000000;

    return totalTimeSeconds / 60; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–∏–Ω—É—Ç–∞—Ö
  }

  Future<void> cleanupExecutables() async {
    if (_workingDirectory != null && await _workingDirectory!.exists()) {
      await _workingDirectory!.delete(recursive: true);
      _isInitialized = false;
      _useSystemFFmpeg = false;
      print('üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã: ${_workingDirectory!.path}');
    }
  }

  void _checkInitialization() {
    if (!_isInitialized) {
      throw Exception(
          'ExecutableManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –í—ã–∑–æ–≤–∏—Ç–µ initializeExecutables() —Å–Ω–∞—á–∞–ª–∞.');
    }
  }

  Future<bool> validateInstallation() async {
    if (!_isInitialized) return false;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
      final waifu2xExists = await File(waifu2xPath).exists();
      final ffmpegExists = await File(ffmpegPath).exists();

      if (!waifu2xExists || !ffmpegExists) {
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏
      final modelDirs = [
        'models-cunet',
        'models-upconv_7_anime_style_art_rgb',
        'models-upconv_7_photo'
      ];

      for (final modelDir in modelDirs) {
        final modelPath = path.join(_workingDirectory!.path, modelDir);
        final dir = Directory(modelPath);

        if (!await dir.exists()) {
          return false;
        }

        final files = await dir.list().toList();
        final modelFiles = files
            .where((f) => f.path.endsWith('.bin') || f.path.endsWith('.param'))
            .toList();

        if (modelFiles.isEmpty) {
          return false;
        }
      }

      return true;
    } catch (e) {
      return false;
    }
  }

  Map<String, dynamic> getConfigurationInfo() {
    return {
      'isInitialized': _isInitialized,
      'useSystemFFmpeg': _useSystemFFmpeg,
      'workingDirectory': _workingDirectory?.path,
      'platform': _platform,
      'ffmpegPath': _isInitialized ? ffmpegPath : null,
      'waifu2xPath': _isInitialized ? waifu2xPath : null,
    };
  }
}
