import 'dart:io';
import 'dart:async';
import 'dart:math';
import 'package:path/path.dart' as path;
import 'package:video_upscaler/models/processing_config.dart';
import 'package:video_upscaler/services/executable_manager.dart';
import 'package:video_upscaler/services/system_info_service.dart';
import 'package:video_upscaler/services/resource_monitor.dart';

class VideoProcessingService {
  final StreamController<String> _progressController =
      StreamController<String>.broadcast();
  final StreamController<double> _percentageController =
      StreamController<double>.broadcast();

  Stream<String> get progressStream => _progressController.stream;
  Stream<double> get percentageStream => _percentageController.stream;

  bool _isProcessing = false;
  String? _tempBasePath;
  int _totalFrames = 0;
  DateTime? _startTime;

  bool get isProcessing => _isProcessing;

  Future<String> processVideo(ProcessingConfig config) async {
    if (_isProcessing) {
      throw Exception('–£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ');
    }

    _isProcessing = true;
    _startTime = DateTime.now();

    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
      ResourceMonitor.instance.startMonitoring();

      _updateProgress('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ExecutableManager...', 0.0);
      ResourceMonitor.instance.updateProgress(
        processedFrames: 0,
        totalFrames: 0,
        currentStage: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...',
      );

      final executableManager = ExecutableManager.instance;

      if (!await executableManager.validateInstallation()) {
        throw Exception(
            'ExecutableManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.');
      }

      _updateProgress('–ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...', 5.0);
      ResourceMonitor.instance.updateProgress(
        processedFrames: 0,
        totalFrames: 0,
        currentStage: '–ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã...',
      );

      final systemInfo = await SystemInfoService.analyzeSystem();

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ö–æ–¥–Ω–æ–º –≤–∏–¥–µ–æ
      final videoInfo = await _analyzeInputVideo(config.inputVideoPath);

      // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥ –∂–µ–ª–µ–∑–æ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
      final optimizedParams =
          await _getOptimizedParameters(systemInfo, videoInfo, config);

      print('=== –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ ===');
      print('–°–∏—Å—Ç–µ–º–∞: ${systemInfo.systemSummary}');
      print(
          '–í—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ: ${videoInfo['width']}x${videoInfo['height']} @ ${videoInfo['fps']}fps');
      print(
          '–í—ã—Ö–æ–¥–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: ${optimizedParams['output_width']}x${optimizedParams['output_height']}');
      print('–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: $optimizedParams');

      _updateProgress('–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...', 10.0);
      ResourceMonitor.instance.updateProgress(
        processedFrames: 0,
        totalFrames: 0,
        currentStage: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤...',
      );

      final tempDir = await _createTempDirectories();

      _updateProgress('–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤ –∏–∑ –≤–∏–¥–µ–æ...', 15.0);
      ResourceMonitor.instance.updateProgress(
        processedFrames: 0,
        totalFrames: 0,
        currentStage: '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤...',
      );

      await _extractFrames(
          config.inputVideoPath, tempDir['frames']!, optimizedParams);

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤
      final framesList = await Directory(tempDir['frames']!)
          .list()
          .where((entity) => entity is File && entity.path.endsWith('.png'))
          .toList();
      _totalFrames = framesList.length;

      print('üì∏ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤: $_totalFrames');

      _updateProgress('–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏...', 25.0);
      ResourceMonitor.instance.updateProgress(
        processedFrames: 0,
        totalFrames: _totalFrames,
        currentStage: '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ...',
      );

      final hasAudio =
          await _extractAudio(config.inputVideoPath, tempDir['audio']!);

      _updateProgress('AI –∞–ø—Å–∫–µ–π–ª–∏–Ω–≥ –∫–∞–¥—Ä–æ–≤...', 30.0);
      ResourceMonitor.instance.updateProgress(
        processedFrames: 0,
        totalFrames: _totalFrames,
        currentStage: 'AI –∞–ø—Å–∫–µ–π–ª–∏–Ω–≥ –∫–∞–¥—Ä–æ–≤...',
      );

      await _upscaleFramesWithProgress(tempDir['frames']!, tempDir['scaled']!,
          config, systemInfo, optimizedParams);

      _updateProgress('–°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ...', 85.0);
      ResourceMonitor.instance.updateProgress(
        processedFrames: _totalFrames,
        totalFrames: _totalFrames,
        currentStage: '–°–±–æ—Ä–∫–∞ –≤–∏–¥–µ–æ...',
      );

      final outputPath = await _assembleVideo(tempDir['scaled']!,
          tempDir['audio']!, config, hasAudio, optimizedParams);

      _updateProgress('–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...', 95.0);
      ResourceMonitor.instance.updateProgress(
        processedFrames: _totalFrames,
        totalFrames: _totalFrames,
        currentStage: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...',
      );

      await _cleanupTempFiles();

      _updateProgress('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 100.0);
      ResourceMonitor.instance.updateProgress(
        processedFrames: _totalFrames,
        totalFrames: _totalFrames,
        currentStage: '–ì–æ—Ç–æ–≤–æ!',
      );

      return outputPath;
    } catch (e) {
      _updateProgress('–û—à–∏–±–∫–∞: $e', 0.0);
      ResourceMonitor.instance.updateProgress(
        processedFrames: 0,
        totalFrames: _totalFrames,
        currentStage: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
      );
      await _cleanupTempFiles();
      rethrow;
    } finally {
      _isProcessing = false;
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
      ResourceMonitor.instance.stopMonitoring();
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  Future<Map<String, dynamic>> _analyzeInputVideo(String videoPath) async {
    final executableManager = ExecutableManager.instance;
    final ffmpegPath = executableManager.ffmpegPath;

    print('üé¨ –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ: $videoPath');

    final result = await Process.run(
        ffmpegPath,
        [
          '-i',
          videoPath,
          '-hide_banner',
        ],
        runInShell: Platform.isWindows);

    final output = result.stderr.toString();
    print('üìπ FFmpeg –≤—ã–≤–æ–¥: $output');

    // –£–õ–£–ß–®–ï–ù–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
    final RegExp resolutionRegex =
        RegExp(r'(\d{2,})x(\d{2,})'); // –ú–∏–Ω–∏–º—É–º 2 —Ü–∏—Ñ—Ä—ã
    final RegExp fpsRegex = RegExp(r'(\d+(?:\.\d+)?)\s*fps');
    final RegExp bitrateRegex = RegExp(r'(\d+)\s*kb/s');

    final resolutionMatch = resolutionRegex.firstMatch(output);
    final fpsMatch = fpsRegex.firstMatch(output);
    final bitrateMatch = bitrateRegex.firstMatch(output);

    final width =
        resolutionMatch != null ? int.parse(resolutionMatch.group(1)!) : 1920;
    final height =
        resolutionMatch != null ? int.parse(resolutionMatch.group(2)!) : 1080;
    final fps = fpsMatch != null ? double.parse(fpsMatch.group(1)!) : 30.0;
    final bitrate =
        bitrateMatch != null ? int.parse(bitrateMatch.group(1)!) : 5000;

    print(
        'üìê –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: ${width}x${height} @ ${fps}fps, –±–∏—Ç—Ä–µ–π—Ç: ${bitrate}kb/s');

    return {
      'width': width,
      'height': height,
      'fps': fps,
      'bitrate': bitrate,
      'raw_info': output,
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥ –∂–µ–ª–µ–∑–æ
  Future<Map<String, dynamic>> _getOptimizedParameters(
      SystemCapabilities systemInfo,
      Map<String, dynamic> videoInfo,
      ProcessingConfig config) async {
    final inputWidth = videoInfo['width'] as int;
    final inputHeight = videoInfo['height'] as int;
    final inputFPS = videoInfo['fps'] as double;
    final scaleFactor = config.scaleFactor;

    final outputWidth = inputWidth * scaleFactor;
    final outputHeight = inputHeight * scaleFactor;
    final totalPixels = outputWidth * outputHeight;

    // –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è ExecutableManager
    final systemCapabilities = {
      'has_vulkan': systemInfo.supportsGPU,
      'available_gpus': systemInfo.availableGPUs,
      'cpu_cores': systemInfo.cpuCores,
      'memory_info': {
        'total_gb': systemInfo.totalMemoryGB,
      },
      'platform': systemInfo.platform,
    };

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑ ExecutableManager –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    final optimalArgs = ExecutableManager.instance.getOptimalWaifu2xArgs(
      inputPath: 'dummy', // –ó–∞–ø–æ–ª–Ω–∏–º –ø–æ–∑–∂–µ
      outputPath: 'dummy', // –ó–∞–ø–æ–ª–Ω–∏–º –ø–æ–∑–∂–µ
      modelPath: 'dummy', // –ó–∞–ø–æ–ª–Ω–∏–º –ø–æ–∑–∂–µ
      systemCapabilities: systemCapabilities,
      scale: config.scaleFactor,
      noise: config.scaleNoise,
      useGPU: systemInfo.supportsGPU,
      enableTTA: false, // –î–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
      format: 'png',
    );

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã waifu2x –Ω–∞ –æ—Å–Ω–æ–≤–µ –∂–µ–ª–µ–∑–∞
    Map<String, dynamic> waifu2xParams =
        _getWaifu2xParameters(systemInfo, scaleFactor);

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã FFmpeg –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ –∂–µ–ª–µ–∑–∞
    Map<String, dynamic> ffmpegParams = _getFFmpegParameters(
        systemInfo,
        inputWidth,
        inputHeight,
        outputWidth,
        outputHeight,
        inputFPS,
        scaleFactor);

    return {
      'output_width': outputWidth,
      'output_height': outputHeight,
      'total_pixels': totalPixels,
      'waifu2x': waifu2xParams,
      'ffmpeg': ffmpegParams,
      'optimal_args': optimalArgs,
    };
  }

  // –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã waifu2x –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
  Map<String, dynamic> _getWaifu2xParameters(
      SystemCapabilities systemInfo, int scaleFactor) {
    final memoryGB = systemInfo.totalMemoryGB;
    final cpuCores = systemInfo.cpuCores;
    final platform = systemInfo.platform;

    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú scale factor - —Ç–æ–ª—å–∫–æ 1, 2, 4 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è!
    int validScaleFactor = scaleFactor;
    if (![1, 2, 4].contains(validScaleFactor)) {
      if (validScaleFactor == 3) {
        validScaleFactor = 2; // 3x –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        print('‚ö†Ô∏è –ú–∞—Å—à—Ç–∞–± 3x –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º 2x');
      } else if (validScaleFactor > 4) {
        validScaleFactor = 4; // –ú–∞–∫—Å–∏–º—É–º 4x
        print('‚ö†Ô∏è –ú–∞—Å—à—Ç–∞–± –±–æ–ª—å—à–µ 4x –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º 4x');
      } else {
        validScaleFactor = 2; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 2x
        print('‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–∞—Å—à—Ç–∞–±, –∏—Å–ø–æ–ª—å–∑—É–µ–º 2x');
      }
    }

    int tileSize = 0; // auto –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    int threads = (cpuCores / 2).round().clamp(1, 4);
    int gpuDevice = 0; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é GPU

    // –ü–ª–∞—Ç—Ñ–æ—Ä–º–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (platform == 'macos') {
      // Apple Silicon - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      gpuDevice = 0;
      if (memoryGB >= 16) {
        tileSize = validScaleFactor >= 4 ? 128 : 256; // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è 16GB+
      } else if (memoryGB >= 8) {
        tileSize = validScaleFactor >= 4 ? 64 : 128;
      } else {
        tileSize = 32; // –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ –¥–ª—è <8GB
      }
      print(
          'üçé Apple Silicon –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: GPU=0, tileSize=$tileSize –¥–ª—è ${validScaleFactor}x');
    } else if (platform == 'windows' || platform == 'linux') {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
      if (systemInfo.supportsGPU && systemInfo.availableGPUs.isNotEmpty) {
        gpuDevice = 0;
        if (memoryGB >= 16) {
          tileSize = validScaleFactor >= 4 ? 200 : 400;
        } else if (memoryGB >= 8) {
          tileSize = validScaleFactor >= 4 ? 100 : 200;
        } else {
          tileSize = 100;
        }
      } else {
        // CPU fallback
        gpuDevice = -1;
        tileSize = validScaleFactor >= 4 ? 50 : 100;
        threads = cpuCores.clamp(1, 8);
      }
    }

    return {
      'tile_size': tileSize,
      'threads': threads,
      'gpu_device': gpuDevice,
      'use_gpu': gpuDevice >= 0,
      'valid_scale_factor': validScaleFactor,
    };
  }

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã FFmpeg
  Map<String, dynamic> _getFFmpegParameters(
      SystemCapabilities systemInfo,
      int inputWidth,
      int inputHeight,
      int outputWidth,
      int outputHeight,
      double inputFPS,
      int scaleFactor) {
    final totalPixels = outputWidth * outputHeight;
    final memoryGB = systemInfo.totalMemoryGB;

    // –í—ã–±–æ—Ä –∫–æ–¥–µ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    String videoCodec = 'libx264';
    String preset = 'medium';
    int crf = 23;
    String pixFormat = 'yuv420p';

    // –î–ª—è –≤—ã—Å–æ–∫–∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º H.265
    if (totalPixels >= 3840 * 2160) {
      // 4K –∏ –≤—ã—à–µ
      videoCodec = 'libx265';
      crf = 18; // –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è 4K
      preset = memoryGB >= 16 ? 'slow' : 'medium';
      pixFormat = 'yuv420p10le'; // 10-bit –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    } else if (totalPixels >= 2560 * 1440) {
      // 1440p
      videoCodec = 'libx264';
      crf = 20;
      preset = memoryGB >= 8 ? 'slow' : 'medium';
    } else {
      // 1080p –∏ –Ω–∏–∂–µ
      crf = 23;
      preset = 'medium';
    }

    // –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∏—Ç—Ä–µ–π—Ç–∞
    final bitrate = _calculateOptimalBitrate(
        outputWidth, outputHeight, inputFPS, scaleFactor);
    final maxrate = (bitrate * 1.5).round();
    final bufsize = maxrate * 2;

    return {
      'video_codec': videoCodec,
      'preset': preset,
      'crf': crf,
      'pix_format': pixFormat,
      'bitrate': '${bitrate}k',
      'maxrate': '${maxrate}k',
      'bufsize': '${bufsize}k',
      'fps': inputFPS.round(),
    };
  }

  // –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∏—Ç—Ä–µ–π—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
  int _calculateOptimalBitrate(
      int width, int height, double fps, int scaleFactor) {
    final totalPixels = width * height;
    final pixelsPerSecond = totalPixels * fps;

    // –ë–∞–∑–æ–≤—ã–π –±–∏—Ç—Ä–µ–π—Ç –Ω–∞ –ø–∏–∫—Å–µ–ª—å (–±–∏—Ç/–ø–∏–∫—Å–µ–ª—å/—Å–µ–∫—É–Ω–¥–∞)
    double bitsPerPixel;

    if (totalPixels >= 3840 * 2160) {
      // 4K
      bitsPerPixel = 0.15; // –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è 4K
    } else if (totalPixels >= 2560 * 1440) {
      // 1440p
      bitsPerPixel = 0.12;
    } else if (totalPixels >= 1920 * 1080) {
      // 1080p
      bitsPerPixel = 0.10;
    } else {
      // –ù–∏–∂–µ 1080p
      bitsPerPixel = 0.08;
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∏—Ç—Ä–µ–π—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–∞—Å—à—Ç–∞–±–æ–≤ (–±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π)
    if (scaleFactor >= 4) {
      bitsPerPixel *= 1.5;
    } else if (scaleFactor >= 2) {
      bitsPerPixel *= 1.2;
    }

    final bitrateKbps = (pixelsPerSecond * bitsPerPixel / 1000).round();

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    return bitrateKbps.clamp(1000, 50000); // –û—Ç 1Mbps –¥–æ 50Mbps
  }

  Future<Map<String, String>> _createTempDirectories() async {
    final tempBase = await Directory.systemTemp.createTemp('video_upscaler_');
    _tempBasePath = tempBase.path;

    final directories = {
      'frames': path.join(tempBase.path, 'frames'),
      'scaled': path.join(tempBase.path, 'scaled'),
      'audio': path.join(tempBase.path, 'audio.mp3'),
    };

    for (final entry in directories.entries) {
      if (!entry.key.contains('audio')) {
        await Directory(entry.value).create(recursive: true);
      }
    }

    print('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã –≤: ${tempBase.path}');
    return directories;
  }

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤
  Future<void> _extractFrames(
      String videoPath, String framesDir, Map<String, dynamic> params) async {
    final executableManager = ExecutableManager.instance;
    final ffmpegPath = executableManager.ffmpegPath;
    final ffmpegParams = params['ffmpeg'] as Map<String, dynamic>;

    print('–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤: $videoPath -> $framesDir');

    final args = [
      '-i', videoPath,
      '-vf', 'fps=${ffmpegParams['fps']}', // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π FPS
      path.join(framesDir, 'frame_%06d.png'),
      '-hide_banner',
      '-loglevel', 'error',
    ];

    final result =
        await Process.run(ffmpegPath, args, runInShell: Platform.isWindows);

    if (result.exitCode != 0) {
      throw Exception('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤: ${result.stderr}');
    }

    final framesList = await Directory(framesDir).list().toList();
    print('–ò–∑–≤–ª–µ—á–µ–Ω–æ –∫–∞–¥—Ä–æ–≤: ${framesList.length}');
  }

  Future<bool> _extractAudio(String videoPath, String audioPath) async {
    final executableManager = ExecutableManager.instance;
    final ffmpegPath = executableManager.ffmpegPath;

    print('–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ: $videoPath -> $audioPath');

    final result = await Process.run(
        ffmpegPath,
        [
          '-i',
          videoPath,
          '-vn',
          '-acodec',
          'copy',
          audioPath,
          '-hide_banner',
          '-loglevel',
          'error',
        ],
        runInShell: Platform.isWindows);

    final audioFile = File(audioPath);
    final hasAudio = await audioFile.exists() && await audioFile.length() > 0;

    if (!hasAudio) {
      print('–í–∏–¥–µ–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É –∏–ª–∏ –∞—É–¥–∏–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å');
    } else {
      print('–ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    }

    return hasAudio;
  }

  // –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –∞–ø—Å–∫–µ–π–ª–∏–Ω–≥–∞ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  Future<void> _upscaleFramesWithProgress(
    String framesDir,
    String scaledDir,
    ProcessingConfig config,
    SystemCapabilities systemInfo,
    Map<String, dynamic> optimizedParams,
  ) async {
    final executableManager = ExecutableManager.instance;
    final waifu2xPath = executableManager.waifu2xPath;

    print('üéØ OPTIMIZED –∞–ø—Å–∫–µ–π–ª–∏–Ω–≥ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
    print('‚öôÔ∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${systemInfo.platform}');

    if (!await File(waifu2xPath).exists()) {
      throw Exception('waifu2x-ncnn-vulkan –Ω–µ –Ω–∞–π–¥–µ–Ω: $waifu2xPath');
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    final systemCapabilities = {
      'has_vulkan': systemInfo.supportsGPU,
      'available_gpus': systemInfo.availableGPUs,
      'cpu_cores': systemInfo.cpuCores,
      'memory_info': {
        'total_gb': systemInfo.totalMemoryGB,
      },
      'platform': systemInfo.platform,
    };

    // –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
    final modelPath =
        executableManager.getModelPath(config.modelType ?? 'cunet');

    // –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    final args = executableManager.getOptimalWaifu2xArgs(
      inputPath: framesDir,
      outputPath: scaledDir,
      modelPath: modelPath,
      systemCapabilities: systemCapabilities,
      scale: config.scaleFactor,
      noise: config.scaleNoise,
      useGPU: systemInfo.supportsGPU,
      enableTTA: false, // –î–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
      format: 'png',
    );

    print('üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –∫–æ–º–∞–Ω–¥–∞: ${args.join(' ')}');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    final process =
        await Process.start(waifu2xPath, args, runInShell: Platform.isWindows);

    String output = '';
    String errorOutput = '';

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ —Ñ–∞–π–ª—ã
    Timer? progressTimer;
    progressTimer = Timer.periodic(Duration(seconds: 2), (timer) async {
      try {
        final processedFiles = await Directory(scaledDir)
            .list()
            .where((entity) => entity is File && entity.path.endsWith('.png'))
            .length;

        if (processedFiles > 0) {
          final currentProgress = processedFiles;

          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
          ResourceMonitor.instance.updateProgress(
            processedFrames: currentProgress,
            totalFrames: _totalFrames,
            currentStage: 'AI –∞–ø—Å–∫–µ–π–ª–∏–Ω–≥ –∫–∞–¥—Ä–æ–≤...',
            currentFile:
                'frame_${currentProgress.toString().padLeft(6, '0')}.png',
          );

          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
          final progressPercent =
              (currentProgress / _totalFrames * 55).clamp(0, 55);
          _updateProgress(
              'AI –∞–ø—Å–∫–µ–π–ª–∏–Ω–≥: $currentProgress/$_totalFrames –∫–∞–¥—Ä–æ–≤...',
              30.0 + progressPercent);

          // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –≤—Å–µ –∫–∞–¥—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
          if (currentProgress >= _totalFrames) {
            timer.cancel();
          }
        }
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      }
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞
    process.stdout.transform(SystemEncoding().decoder).listen((data) {
      output += data;
      if (!data.contains('find_blob_index_by_name')) {
        print('üì§ waifu2x stdout: $data');
      }
    });

    process.stderr.transform(SystemEncoding().decoder).listen((data) {
      errorOutput += data;
      if (!data.contains('find_blob_index_by_name')) {
        print('üì• waifu2x stderr: $data');
      }
    });

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    final exitCode = await process.exitCode;
    progressTimer?.cancel();

    print('‚ö° waifu2x –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: $exitCode');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    final scaledFrames = await Directory(scaledDir)
        .list()
        .where((entity) => entity is File && entity.path.endsWith('.png'))
        .toList();

    print('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${scaledFrames.length}/$_totalFrames –∫–∞–¥—Ä–æ–≤');

    if (scaledFrames.length < _totalFrames * 0.8) {
      throw Exception(
          '–ê–ø—Å–∫–µ–π–ª–∏–Ω–≥ –Ω–µ—É–¥–∞—á–µ–Ω: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–ª—å–∫–æ ${scaledFrames.length}/$_totalFrames –∫–∞–¥—Ä–æ–≤');
    }

    print(
        '‚úÖ –ê–ø—Å–∫–µ–π–ª–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: ${scaledFrames.length}/$_totalFrames');
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å–±–æ—Ä–∫–∞ –≤–∏–¥–µ–æ —Å –ü–†–û–°–¢–´–ú–ò –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  Future<String> _assembleVideo(
    String scaledDir,
    String audioPath,
    ProcessingConfig config,
    bool hasAudio,
    Map<String, dynamic> optimizedParams,
  ) async {
    final executableManager = ExecutableManager.instance;
    final ffmpegPath = executableManager.ffmpegPath;

    print('üé¨ –°–±–æ—Ä–∫–∞ –≤–∏–¥–µ–æ: $scaledDir -> ${config.outputPath}');

    // –ü–†–û–í–ï–†–Ø–ï–ú —á—Ç–æ –∫–∞–¥—Ä—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    final scaledFrames = await Directory(scaledDir)
        .list()
        .where((entity) => entity is File && entity.path.endsWith('.png'))
        .toList();

    if (scaledFrames.isEmpty) {
      throw Exception('–ù–µ—Ç –∫–∞–¥—Ä–æ–≤ –¥–ª—è —Å–±–æ—Ä–∫–∏ –≤–∏–¥–µ–æ –≤: $scaledDir');
    }

    print('üì∏ –ù–∞–π–¥–µ–Ω–æ –∫–∞–¥—Ä–æ–≤ –¥–ª—è —Å–±–æ—Ä–∫–∏: ${scaledFrames.length}');

    // –ü–†–û–°–¢–´–ï –ü–ê–†–ê–ú–ï–¢–†–´
    final List<String> args = [
      '-y', // –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
      '-framerate', '30', // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π framerate
      '-i', path.join(scaledDir, 'frame_%06d.png'),

      // –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã H.264
      '-c:v', 'libx264',
      '-crf', '18', // –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
      '-preset', 'medium',
      '-pix_fmt', 'yuv420p',

      '-r', '30', // –í—ã—Ö–æ–¥–Ω–æ–π framerate
    ];

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
    if (hasAudio && await File(audioPath).exists()) {
      print('üîä –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É');
      args.addAll([
        '-i',
        audioPath,
        '-c:a',
        'aac',
        '-b:a',
        '128k',
        '-shortest',
      ]);
    } else {
      print('üîá –í–∏–¥–µ–æ –±–µ–∑ –∞—É–¥–∏–æ');
      args.add('-an');
    }

    // –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    args.addAll([
      '-movflags',
      '+faststart',
      config.outputPath,
    ]);

    print('üöÄ –ö–æ–º–∞–Ω–¥–∞ FFmpeg: ${args.join(' ')}');

    final result =
        await Process.run(ffmpegPath, args, runInShell: Platform.isWindows);

    print('üìä FFmpeg —Ä–µ–∑—É–ª—å—Ç–∞—Ç:');
    print('Exit code: ${result.exitCode}');
    if (result.stderr.isNotEmpty) print('STDERR: ${result.stderr}');

    if (result.exitCode != 0) {
      throw Exception('–°–±–æ—Ä–∫–∞ –≤–∏–¥–µ–æ –Ω–µ —É–¥–∞–ª–∞—Å—å: ${result.stderr}');
    }

    final outputFile = File(config.outputPath);
    if (!await outputFile.exists()) {
      throw Exception('–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω: ${config.outputPath}');
    }

    final outputSize = await outputFile.length();
    final outputSizeMB = (outputSize / 1024 / 1024);

    print('üìπ –í–∏–¥–µ–æ —Å–æ–±—Ä–∞–Ω–æ: ${outputSizeMB.toStringAsFixed(2)} MB');

    if (outputSize < 500 * 1024) {
      throw Exception('–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ - –≤–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏');
    }

    return config.outputPath;
  }

  Future<void> _cleanupTempFiles() async {
    if (_tempBasePath != null) {
      try {
        final tempDir = Directory(_tempBasePath!);
        if (await tempDir.exists()) {
          await tempDir.delete(recursive: true);
          print('–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã: $_tempBasePath');
        }
      } catch (e) {
        print('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: $e');
      }
      _tempBasePath = null;
    }
  }

  void _updateProgress(String message, double percentage) {
    _progressController.add(message);
    _percentageController.add(percentage);
    print('Progress ($percentage%): $message');
  }

  Future<Map<String, dynamic>> getVideoInfo(String videoPath) async {
    return await _analyzeInputVideo(videoPath);
  }

  void stopProcessing() {
    if (_isProcessing) {
      _updateProgress('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏...', 0.0);
      ResourceMonitor.instance.updateProgress(
        processedFrames: 0,
        totalFrames: _totalFrames,
        currentStage: '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
      );
      ResourceMonitor.instance.stopMonitoring();
      _cleanupTempFiles();
      _isProcessing = false;
    }
  }

  void dispose() {
    stopProcessing();
    _progressController.close();
    _percentageController.close();
  }
}
