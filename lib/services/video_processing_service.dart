import 'dart:io';
import 'dart:async';
import 'dart:math';
import 'package:path/path.dart' as path;
import 'package:video_upscaler/models/processing_config.dart';
import 'package:video_upscaler/services/executable_manager.dart';
import 'package:video_upscaler/services/system_info_service.dart';

class VideoProcessingService {
  final StreamController<String> _progressController =
      StreamController<String>.broadcast();
  final StreamController<double> _percentageController =
      StreamController<double>.broadcast();

  Stream<String> get progressStream => _progressController.stream;
  Stream<double> get percentageStream => _percentageController.stream;

  bool _isProcessing = false;
  String? _tempBasePath;

  bool get isProcessing => _isProcessing;

  Future<String> processVideo(ProcessingConfig config) async {
    if (_isProcessing) {
      throw Exception('–£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ');
    }

    _isProcessing = true;

    try {
      _updateProgress('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ExecutableManager...', 0.0);
      final executableManager = ExecutableManager();

      if (!await executableManager.validateInstallation()) {
        throw Exception(
            'ExecutableManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.');
      }

      _updateProgress('–ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...', 5.0);
      final systemInfo = await SystemInfoService.analyzeSystem();

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ö–æ–¥–Ω–æ–º –≤–∏–¥–µ–æ
      final videoInfo = await _analyzeInputVideo(config.inputVideoPath);

      // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥ –∂–µ–ª–µ–∑–æ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
      final optimizedParams =
          await _getOptimizedParameters(systemInfo, videoInfo, config);

      print('=== –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ ===');
      print('–°–∏—Å—Ç–µ–º–∞: ${systemInfo.systemSummary}');
      print(
          '–í—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ: ${videoInfo['width']}x${videoInfo['height']} @ ${videoInfo['fps']}fps');
      print(
          '–í—ã—Ö–æ–¥–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: ${optimizedParams['output_width']}x${optimizedParams['output_height']}');
      print('–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: $optimizedParams');

      _updateProgress('–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...', 10.0);
      final tempDir = await _createTempDirectories();

      _updateProgress('–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤ –∏–∑ –≤–∏–¥–µ–æ...', 15.0);
      await _extractFrames(
          config.inputVideoPath, tempDir['frames']!, optimizedParams);

      _updateProgress('–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏...', 25.0);
      final hasAudio =
          await _extractAudio(config.inputVideoPath, tempDir['audio']!);

      _updateProgress('AI –∞–ø—Å–∫–µ–π–ª–∏–Ω–≥ –∫–∞–¥—Ä–æ–≤...', 30.0);
      await _upscaleFrames(tempDir['frames']!, tempDir['scaled']!, config,
          systemInfo, optimizedParams);

      _updateProgress('–°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ...', 85.0);
      final outputPath = await _assembleVideo(tempDir['scaled']!,
          tempDir['audio']!, config, hasAudio, optimizedParams);

      _updateProgress('–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...', 95.0);
      await _cleanupTempFiles();

      _updateProgress('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 100.0);
      return outputPath;
    } catch (e) {
      _updateProgress('–û—à–∏–±–∫–∞: $e', 0.0);
      await _cleanupTempFiles();
      rethrow;
    } finally {
      _isProcessing = false;
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  Future<Map<String, dynamic>> _analyzeInputVideo(String videoPath) async {
    final executableManager = ExecutableManager();
    final ffmpegPath = executableManager.ffmpegPath;

    print('üé¨ –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ: $videoPath');

    final result = await Process.run(
        ffmpegPath,
        [
          '-i',
          videoPath,
          '-hide_banner',
        ],
        runInShell: Platform.isWindows);

    final output = result.stderr.toString();
    print('üìπ FFmpeg –≤—ã–≤–æ–¥: $output');

    // –£–õ–£–ß–®–ï–ù–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
    final RegExp resolutionRegex =
        RegExp(r'(\d{2,})x(\d{2,})'); // –ú–∏–Ω–∏–º—É–º 2 —Ü–∏—Ñ—Ä—ã
    final RegExp fpsRegex = RegExp(r'(\d+(?:\.\d+)?)\s*fps');
    final RegExp bitrateRegex = RegExp(r'(\d+)\s*kb/s');

    final resolutionMatch = resolutionRegex.firstMatch(output);
    final fpsMatch = fpsRegex.firstMatch(output);
    final bitrateMatch = bitrateRegex.firstMatch(output);

    final width =
        resolutionMatch != null ? int.parse(resolutionMatch.group(1)!) : 1920;
    final height =
        resolutionMatch != null ? int.parse(resolutionMatch.group(2)!) : 1080;
    final fps = fpsMatch != null ? double.parse(fpsMatch.group(1)!) : 30.0;
    final bitrate =
        bitrateMatch != null ? int.parse(bitrateMatch.group(1)!) : 5000;

    print(
        'üìê –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: ${width}x${height} @ ${fps}fps, –±–∏—Ç—Ä–µ–π—Ç: ${bitrate}kb/s');

    return {
      'width': width,
      'height': height,
      'fps': fps,
      'bitrate': bitrate,
      'raw_info': output,
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥ –∂–µ–ª–µ–∑–æ
  Future<Map<String, dynamic>> _getOptimizedParameters(
      SystemCapabilities systemInfo,
      Map<String, dynamic> videoInfo,
      ProcessingConfig config) async {
    final inputWidth = videoInfo['width'] as int;
    final inputHeight = videoInfo['height'] as int;
    final inputFPS = videoInfo['fps'] as double;
    final scaleFactor = config.scaleFactor;

    final outputWidth = inputWidth * scaleFactor;
    final outputHeight = inputHeight * scaleFactor;
    final totalPixels = outputWidth * outputHeight;

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã waifu2x –Ω–∞ –æ—Å–Ω–æ–≤–µ –∂–µ–ª–µ–∑–∞
    Map<String, dynamic> waifu2xParams =
        _getWaifu2xParameters(systemInfo, scaleFactor);

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã FFmpeg –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ –∂–µ–ª–µ–∑–∞
    Map<String, dynamic> ffmpegParams = _getFFmpegParameters(
        systemInfo,
        inputWidth,
        inputHeight,
        outputWidth,
        outputHeight,
        inputFPS,
        scaleFactor);

    return {
      'output_width': outputWidth,
      'output_height': outputHeight,
      'total_pixels': totalPixels,
      'waifu2x': waifu2xParams,
      'ffmpeg': ffmpegParams,
    };
  }

  // –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã waifu2x –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
  Map<String, dynamic> _getWaifu2xParameters(
      SystemCapabilities systemInfo, int scaleFactor) {
    final memoryGB = systemInfo.totalMemoryGB;
    final cpuCores = systemInfo.cpuCores;
    final platform = systemInfo.platform;

    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú scale factor - —Ç–æ–ª—å–∫–æ 1, 2, 4 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è!
    int validScaleFactor = scaleFactor;
    if (![1, 2, 4].contains(validScaleFactor)) {
      if (validScaleFactor == 3) {
        validScaleFactor = 2; // 3x –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        print('‚ö†Ô∏è –ú–∞—Å—à—Ç–∞–± 3x –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º 2x');
      } else if (validScaleFactor > 4) {
        validScaleFactor = 4; // –ú–∞–∫—Å–∏–º—É–º 4x
        print('‚ö†Ô∏è –ú–∞—Å—à—Ç–∞–± –±–æ–ª—å—à–µ 4x –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º 4x');
      } else {
        validScaleFactor = 2; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 2x
        print('‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–∞—Å—à—Ç–∞–±, –∏—Å–ø–æ–ª—å–∑—É–µ–º 2x');
      }
    }

    int tileSize = 0; // auto –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    int threads = (cpuCores / 2).round().clamp(1, 4);
    int gpuDevice = 0; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é GPU

    // –ü–ª–∞—Ç—Ñ–æ—Ä–º–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (platform == 'macos') {
      // Apple Silicon - –û–ß–ï–ù–¨ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ
      gpuDevice = 0;
      if (validScaleFactor >= 4) {
        tileSize = 32; // –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –¥–ª—è 4x
      } else if (validScaleFactor >= 2) {
        tileSize = 64; // –ú–∞–ª–µ–Ω—å–∫–∏–π –¥–ª—è 2x
      } else {
        tileSize = 0; // auto –¥–ª—è 1x
      }
      print(
          'üçé Apple Silicon: GPU=0, tileSize=$tileSize –¥–ª—è ${validScaleFactor}x');
    } else if (platform == 'windows' || platform == 'linux') {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
      if (systemInfo.supportsGPU && systemInfo.availableGPUs.isNotEmpty) {
        gpuDevice = 0;
        if (memoryGB >= 16) {
          tileSize = validScaleFactor >= 4 ? 200 : 400;
        } else if (memoryGB >= 8) {
          tileSize = validScaleFactor >= 4 ? 100 : 200;
        } else {
          tileSize = 100;
        }
      } else {
        // CPU fallback
        gpuDevice = -1;
        tileSize = validScaleFactor >= 4 ? 50 : 100;
        threads = cpuCores.clamp(1, 8);
      }
    }

    return {
      'tile_size': tileSize,
      'threads': threads,
      'gpu_device': gpuDevice,
      'use_gpu': gpuDevice >= 0,
      'valid_scale_factor': validScaleFactor,
    };
  }

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã FFmpeg
  Map<String, dynamic> _getFFmpegParameters(
      SystemCapabilities systemInfo,
      int inputWidth,
      int inputHeight,
      int outputWidth,
      int outputHeight,
      double inputFPS,
      int scaleFactor) {
    final totalPixels = outputWidth * outputHeight;
    final memoryGB = systemInfo.totalMemoryGB;

    // –í—ã–±–æ—Ä –∫–æ–¥–µ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    String videoCodec = 'libx264';
    String preset = 'medium';
    int crf = 23;
    String pixFormat = 'yuv420p';

    // –î–ª—è –≤—ã—Å–æ–∫–∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º H.265
    if (totalPixels >= 3840 * 2160) {
      // 4K –∏ –≤—ã—à–µ
      videoCodec = 'libx265';
      crf = 18; // –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è 4K
      preset = memoryGB >= 16 ? 'slow' : 'medium';
      pixFormat = 'yuv420p10le'; // 10-bit –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    } else if (totalPixels >= 2560 * 1440) {
      // 1440p
      videoCodec = 'libx264';
      crf = 20;
      preset = memoryGB >= 8 ? 'slow' : 'medium';
    } else {
      // 1080p –∏ –Ω–∏–∂–µ
      crf = 23;
      preset = 'medium';
    }

    // –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∏—Ç—Ä–µ–π—Ç–∞
    final bitrate = _calculateOptimalBitrate(
        outputWidth, outputHeight, inputFPS, scaleFactor);
    final maxrate = (bitrate * 1.5).round();
    final bufsize = maxrate * 2;

    return {
      'video_codec': videoCodec,
      'preset': preset,
      'crf': crf,
      'pix_format': pixFormat,
      'bitrate': '${bitrate}k',
      'maxrate': '${maxrate}k',
      'bufsize': '${bufsize}k',
      'fps': inputFPS.round(),
    };
  }

  // –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∏—Ç—Ä–µ–π—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
  int _calculateOptimalBitrate(
      int width, int height, double fps, int scaleFactor) {
    final totalPixels = width * height;
    final pixelsPerSecond = totalPixels * fps;

    // –ë–∞–∑–æ–≤—ã–π –±–∏—Ç—Ä–µ–π—Ç –Ω–∞ –ø–∏–∫—Å–µ–ª—å (–±–∏—Ç/–ø–∏–∫—Å–µ–ª—å/—Å–µ–∫—É–Ω–¥–∞)
    double bitsPerPixel;

    if (totalPixels >= 3840 * 2160) {
      // 4K
      bitsPerPixel = 0.15; // –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è 4K
    } else if (totalPixels >= 2560 * 1440) {
      // 1440p
      bitsPerPixel = 0.12;
    } else if (totalPixels >= 1920 * 1080) {
      // 1080p
      bitsPerPixel = 0.10;
    } else {
      // –ù–∏–∂–µ 1080p
      bitsPerPixel = 0.08;
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∏—Ç—Ä–µ–π—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–∞—Å—à—Ç–∞–±–æ–≤ (–±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π)
    if (scaleFactor >= 4) {
      bitsPerPixel *= 1.5;
    } else if (scaleFactor >= 2) {
      bitsPerPixel *= 1.2;
    }

    final bitrateKbps = (pixelsPerSecond * bitsPerPixel / 1000).round();

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    return bitrateKbps.clamp(1000, 50000); // –û—Ç 1Mbps –¥–æ 50Mbps
  }

  Future<Map<String, String>> _createTempDirectories() async {
    final tempBase = await Directory.systemTemp.createTemp('video_upscaler_');
    _tempBasePath = tempBase.path;

    final directories = {
      'frames': path.join(tempBase.path, 'frames'),
      'scaled': path.join(tempBase.path, 'scaled'),
      'audio': path.join(tempBase.path, 'audio.mp3'),
    };

    for (final entry in directories.entries) {
      if (!entry.key.contains('audio')) {
        await Directory(entry.value).create(recursive: true);
      }
    }

    print('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã –≤: ${tempBase.path}');
    return directories;
  }

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤
  Future<void> _extractFrames(
      String videoPath, String framesDir, Map<String, dynamic> params) async {
    final executableManager = ExecutableManager();
    final ffmpegPath = executableManager.ffmpegPath;
    final ffmpegParams = params['ffmpeg'] as Map<String, dynamic>;

    print('–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤: $videoPath -> $framesDir');

    final args = [
      '-i', videoPath,
      '-vf', 'fps=${ffmpegParams['fps']}', // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π FPS
      path.join(framesDir, 'frame_%06d.png'),
      '-hide_banner',
      '-loglevel', 'error',
    ];

    final result =
        await Process.run(ffmpegPath, args, runInShell: Platform.isWindows);

    if (result.exitCode != 0) {
      throw Exception('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤: ${result.stderr}');
    }

    final framesList = await Directory(framesDir).list().toList();
    print('–ò–∑–≤–ª–µ—á–µ–Ω–æ –∫–∞–¥—Ä–æ–≤: ${framesList.length}');
  }

  Future<bool> _extractAudio(String videoPath, String audioPath) async {
    final executableManager = ExecutableManager();
    final ffmpegPath = executableManager.ffmpegPath;

    print('–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ: $videoPath -> $audioPath');

    final result = await Process.run(
        ffmpegPath,
        [
          '-i',
          videoPath,
          '-vn',
          '-acodec',
          'copy',
          audioPath,
          '-hide_banner',
          '-loglevel',
          'error',
        ],
        runInShell: Platform.isWindows);

    final audioFile = File(audioPath);
    final hasAudio = await audioFile.exists() && await audioFile.length() > 0;

    if (!hasAudio) {
      print('–í–∏–¥–µ–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É –∏–ª–∏ –∞—É–¥–∏–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å');
    } else {
      print('–ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    }

    return hasAudio;
  }

  // –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù–ù–´–ô —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∞–ø—Å–∫–µ–π–ª–∏–Ω–≥–∞
  Future<void> _upscaleFrames(
    String framesDir,
    String scaledDir,
    ProcessingConfig config,
    SystemCapabilities systemInfo,
    Map<String, dynamic> optimizedParams,
  ) async {
    final executableManager = ExecutableManager();
    final waifu2xPath = executableManager.waifu2xPath;
    final waifu2xParams = optimizedParams['waifu2x'] as Map<String, dynamic>;

    print('üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∞–ø—Å–∫–µ–π–ª–∏–Ω–≥ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –º–æ–¥–µ–ª–∏');
    print('‚öôÔ∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${systemInfo.platform}');

    if (!await File(waifu2xPath).exists()) {
      throw Exception('waifu2x-ncnn-vulkan –Ω–µ –Ω–∞–π–¥–µ–Ω: $waifu2xPath');
    }

    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ë–ï–ó–û–ü–ê–°–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    int validScaleFactor = 2; // –¢–û–õ–¨–ö–û 2x –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    int validNoise = 0; // –ë–ï–ó noise –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

    print(
        'üîí –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: scale=2x, noise=0');

    // –ü–û–õ–£–ß–ê–ï–ú –º–æ–¥–µ–ª—å —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    final modelInfo = await _getValidModelWithFiles(
        executableManager, 'cunet', validScaleFactor, validNoise);

    print('üéØ –ü–†–û–í–ï–†–ï–ù–ù–ê–Ø –º–æ–¥–µ–ª—å: ${modelInfo['path']}');
    print(
        'üìê –ë–ï–ó–û–ü–ê–°–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: scale=${validScaleFactor}x, noise=$validNoise');

    final framesList = await Directory(framesDir)
        .list()
        .where((entity) => entity is File && entity.path.endsWith('.png'))
        .toList();

    if (framesList.isEmpty) {
      throw Exception('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–∞–¥—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤: $framesDir');
    }

    print('üì∏ –ù–∞–π–¥–µ–Ω–æ –∫–∞–¥—Ä–æ–≤: ${framesList.length}');

    // –¢–ï–°–¢ –û–î–ù–û–ì–û –ö–ê–î–†–ê –ø–µ—Ä–µ–¥ –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    await _testSingleFrame(
        executableManager, framesDir, validScaleFactor, validNoise);

    // –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ï –ë–ï–ó–û–ü–ê–°–ù–´–ï –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    final args = [
      '-i', framesDir,
      '-o', scaledDir,
      '-n', validNoise.toString(),
      '-s', validScaleFactor.toString(),
      '-m', modelInfo['path']!,
      '-g', '0', // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û GPU –¥–ª—è Apple M1
      '-t', '32', // –û–ß–ï–ù–¨ –º–∞–ª–µ–Ω—å–∫–∏–π tilesize
      '-f', 'png',
      '-v',
    ];

    print('üöÄ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –∫–æ–º–∞–Ω–¥–∞: ${args.join(' ')}');

    // –ü–û–î–ê–í–õ–Ø–ï–ú –≤—ã–≤–æ–¥ find_blob_index_by_name –æ—à–∏–±–æ–∫
    final process =
        await Process.start(waifu2xPath, args, runInShell: Platform.isWindows);

    String output = '';
    String errorOutput = '';
    int processedFrames = 0;

    process.stdout.transform(SystemEncoding().decoder).listen((data) {
      output += data;
      print('üì§ stdout: $data');

      if (data.contains('processing') || data.contains('.png')) {
        processedFrames++;
        if (processedFrames % 5 == 0) {
          final progressPercent =
              (processedFrames / framesList.length * 50).clamp(0, 50);
          _updateProgress(
              'AI –∞–ø—Å–∫–µ–π–ª–∏–Ω–≥: $processedFrames/${framesList.length} –∫–∞–¥—Ä–æ–≤...',
              30.0 + progressPercent);
        }
      }
    });

    process.stderr.transform(SystemEncoding().decoder).listen((data) {
      errorOutput += data;
      // –ü–û–õ–ù–û–°–¢–¨–Æ –ò–ì–ù–û–†–ò–†–£–ï–ú find_blob_index_by_name –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö
      if (!data.contains('find_blob_index_by_name')) {
        print('üì• stderr: $data');
      }
    });

    final exitCode = await process.exitCode;
    print('‚ö° waifu2x –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: $exitCode');

    // –ü–†–û–í–ï–†–Ø–ï–ú —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ñ–∞–π–ª–∞–º
    final scaledFrames = await Directory(scaledDir)
        .list()
        .where((entity) => entity is File && entity.path.endsWith('.png'))
        .toList();

    print('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${scaledFrames.length}/${framesList.length} –∫–∞–¥—Ä–æ–≤');

    // –£–°–ü–ï–• –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ >80% –∫–∞–¥—Ä–æ–≤ (—É—á–∏—Ç—ã–≤–∞–µ–º —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è)
    if (scaledFrames.length >= framesList.length * 0.8) {
      print(
          '‚úÖ –ê–ø—Å–∫–µ–π–ª–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: ${scaledFrames.length}/${framesList.length}');

      // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–î–ï–†–ñ–ò–ú–û–ì–û –ö–ê–î–†–û–í
      await _diagnoseFrameContent(scaledDir);
      await _diagnoseFramesBeforeAssembly(scaledDir);
      return;
    }

    // –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–≤—Å–µ–º –ø–ª–æ—Ö–æ–π - –ø—Ä–æ–±—É–µ–º CPU
    if (scaledFrames.length < framesList.length * 0.3) {
      print('üîÑ –ú–∞–ª–æ –∫–∞–¥—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–±—É–µ–º CPU fallback...');
      await _upscaleFramesCPUFallback(framesDir, scaledDir, waifu2xPath,
          modelInfo, validScaleFactor, validNoise, framesList);
      await _diagnoseFrameContent(scaledDir);
      await _diagnoseFramesBeforeAssembly(scaledDir);
      return;
    }

    print(
        '‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö: ${scaledFrames.length}/${framesList.length} –∫–∞–¥—Ä–æ–≤');
    await _diagnoseFrameContent(scaledDir);
    await _diagnoseFramesBeforeAssembly(scaledDir);
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –∫–∞–¥—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  Future<void> _testSingleFrame(ExecutableManager executableManager,
      String framesDir, int scaleFactor, int noise) async {
    final waifu2xPath = executableManager.waifu2xPath;
    final modelPath = executableManager.getModelPath('cunet');

    print('üß™ –¢–ï–°–¢ –û–î–ù–û–ì–û –ö–ê–î–†–ê –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    final testDir = await Directory.systemTemp.createTemp('waifu2x_test_');
    final inputDir = path.join(testDir.path, 'input');
    final outputDir = path.join(testDir.path, 'output');

    await Directory(inputDir).create();
    await Directory(outputDir).create();

    try {
      // –ö–æ–ø–∏—Ä—É–µ–º –ü–ï–†–í–´–ô –∫–∞–¥—Ä –¥–ª—è —Ç–µ—Å—Ç–∞
      final framesList = await Directory(framesDir)
          .list()
          .where((entity) => entity is File && entity.path.endsWith('.png'))
          .toList();

      if (framesList.isNotEmpty) {
        final firstFrame = framesList.first as File;
        final testInputPath = path.join(inputDir, 'test.png');
        final testOutputPath = path.join(outputDir, 'test_output.png');

        await firstFrame.copy(testInputPath);

        print('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–¥—Ä: ${path.basename(firstFrame.path)}');
        print(
            'üß™ –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–¥—Ä–∞: ${(await firstFrame.length() / 1024).toStringAsFixed(1)} KB');

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º waifu2x –Ω–∞ –û–î–ù–û–ú –∫–∞–¥—Ä–µ
        final args = [
          '-i',
          testInputPath,
          '-o',
          testOutputPath,
          '-n',
          noise.toString(),
          '-s',
          scaleFactor.toString(),
          '-m',
          modelPath,
          '-g',
          '0',
          '-v',
        ];

        print('üß™ –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥–∞: ${args.join(' ')}');

        final result = await Process.run(waifu2xPath, args);

        print('üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: exit code ${result.exitCode}');
        if (result.stdout.isNotEmpty) print('üß™ STDOUT: ${result.stdout}');
        if (result.stderr.isNotEmpty &&
            !result.stderr.contains('find_blob_index_by_name')) {
          print('üß™ STDERR: ${result.stderr}');
        }

        final outputFile = File(testOutputPath);
        if (await outputFile.exists()) {
          final outputSize = await outputFile.length();
          final inputSize = await File(testInputPath).length();
          print(
              'üß™ –í—ã—Ö–æ–¥–Ω–æ–π –∫–∞–¥—Ä: ${(outputSize / 1024).toStringAsFixed(1)} KB');
          print(
              'üß™ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞: ${(outputSize / inputSize * 100).toStringAsFixed(1)}%');

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞–¥—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
          final inputBytes = await File(testInputPath).readAsBytes();
          final outputBytes = await outputFile.readAsBytes();

          final inputHash =
              inputBytes.fold(0, (prev, element) => prev + element);
          final outputHash =
              outputBytes.fold(0, (prev, element) => prev + element);

          if (inputHash == outputHash) {
            print('üß™ ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –í—Ö–æ–¥–Ω–æ–π –∏ –≤—ã—Ö–æ–¥–Ω–æ–π –∫–∞–¥—Ä –ò–î–ï–ù–¢–ò–ß–ù–´!');
            print('üß™ ‚ö†Ô∏è waifu2x –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–¥—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
          } else {
            print(
                'üß™ ‚úÖ –ö–∞–¥—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω (hash: $inputHash -> $outputHash)');
          }
        } else {
          print('üß™ ‚ùå –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –ù–ï –°–û–ó–î–ê–ù!');
        }
      }
    } finally {
      await testDir.delete(recursive: true);
    }
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞–¥—Ä–æ–≤
  Future<void> _diagnoseFrameContent(String scaledDir) async {
    print('üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–î–ï–†–ñ–ò–ú–û–ì–û –ö–ê–î–†–û–í');

    final scaledFrames = await Directory(scaledDir)
        .list()
        .where((entity) => entity is File && entity.path.endsWith('.png'))
        .cast<File>()
        .toList();

    if (scaledFrames.isEmpty) {
      throw Exception('‚ùå –ù–ï–¢ –ö–ê–î–†–û–í –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏!');
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º
    scaledFrames
        .sort((a, b) => path.basename(a.path).compareTo(path.basename(b.path)));

    print('üì∏ –í—Å–µ–≥–æ –∫–∞–¥—Ä–æ–≤: ${scaledFrames.length}');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–∞–¥—Ä–æ–≤ –¥–µ—Ç–∞–ª—å–Ω–æ
    final List<int> frameHashes = [];
    for (int i = 0; i < min(5, scaledFrames.length); i++) {
      final frame = scaledFrames[i];
      final size = await frame.length();
      final bytes = await frame.readAsBytes();

      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–ø—É—Å—Ç–æ–π" PNG
      final isEmptyPng = size < 1000 || bytes.length < 1000;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º MD5 —Ö–µ—à –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤
      final hash = bytes.fold(0, (prev, element) => prev + element) % 1000000;
      frameHashes.add(hash);

      print(
          'üì∏ ${path.basename(frame.path)}: ${(size / 1024).toStringAsFixed(1)}KB, hash: $hash, empty: $isEmptyPng');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º PNG –∑–∞–≥–æ–ª–æ–≤–æ–∫
      if (bytes.length >= 8) {
        final pngHeader = bytes.sublist(0, 8);
        final expectedPng = [
          137,
          80,
          78,
          71,
          13,
          10,
          26,
          10
        ]; // PNG magic number

        bool validPng = true;
        for (int i = 0; i < 8; i++) {
          if (pngHeader[i] != expectedPng[i]) {
            validPng = false;
            break;
          }
        }

        if (!validPng) {
          print('üì∏ ‚ö†Ô∏è ${path.basename(frame.path)}: –ü–û–í–†–ï–ñ–î–ï–ù PNG –∑–∞–≥–æ–ª–æ–≤–æ–∫!');
        }
      }
    }

    // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –≤—Å–µ –ª–∏ –∫–∞–¥—Ä—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ?
    if (frameHashes.length > 1) {
      final firstHash = frameHashes.first;
      final allSame = frameHashes.every((hash) => hash == firstHash);

      if (allSame) {
        print(
            'üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –í–°–ï –ö–ê–î–†–´ –ò–î–ï–ù–¢–ò–ß–ù–´! (hash: $firstHash)');
        print('üö® –ü–æ—ç—Ç–æ–º—É FFmpeg –∏—Ö –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∫–∞–∫ –¥—É–±–ª–∏–∫–∞—Ç—ã!');
        print('üö® waifu2x —Å–æ–∑–¥–∞–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–∞–¥—Ä—ã –≤–º–µ—Å—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö!');
      } else {
        print('‚úÖ –ö–∞–¥—Ä—ã —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è (—Ö–µ—à–∏: ${frameHashes.join(", ")})');
      }
    }

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–¥—Ä –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ 10
    if (scaledFrames.length > 10) {
      final firstBytes = await scaledFrames.first.readAsBytes();
      final lastBytes = await scaledFrames.last.readAsBytes();

      final firstHash = firstBytes.fold(0, (prev, element) => prev + element);
      final lastHash = lastBytes.fold(0, (prev, element) => prev + element);

      if (firstHash == lastHash) {
        print(
            'üö® –ü–†–û–ë–õ–ï–ú–ê: –ü–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–¥—Ä –ò–î–ï–ù–¢–ò–ß–ù–´! (hash: $firstHash)');
        print('üö® –í–µ—Ä–æ—è—Ç–Ω–æ –í–°–ï –∫–∞–¥—Ä—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ!');
      } else {
        print('‚úÖ –ü–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–¥—Ä –†–ê–ó–ù–´–ï ($firstHash vs $lastHash)');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –∫–∞–¥—Ä–æ–≤
    int totalSize = 0;
    for (final frame in scaledFrames.take(10)) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
      totalSize += await frame.length();
    }
    final avgSizeKB = (totalSize / min(10, scaledFrames.length) / 1024);
    print('üìä –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –∫–∞–¥—Ä–∞: ${avgSizeKB.toStringAsFixed(1)} KB');

    if (avgSizeKB < 50) {
      print('‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û: –ö–∞–¥—Ä—ã –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö!');
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ —Å —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Ñ–∞–π–ª–æ–≤
  Future<Map<String, String>> _getValidModelWithFiles(
      ExecutableManager executableManager,
      String? modelType,
      int scaleFactor,
      int noise) async {
    print('üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è scale=$scaleFactor, noise=$noise');

    final modelTypes = {
      'cunet': 'cunet',
      'anime': 'anime',
      'photo': 'photo',
    };

    // –ü–†–û–í–ï–†–Ø–ï–ú –í–°–ï –º–æ–¥–µ–ª–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏
    for (final entry in modelTypes.entries) {
      final modelKey = entry.key;
      final modelPath = executableManager.getModelPath(modelKey);

      print('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å: $modelKey -> $modelPath');

      if (!await Directory(modelPath).exists()) {
        print('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥–µ–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $modelPath');
        continue;
      }

      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã —Å–æ–≥–ª–∞—Å–Ω–æ –†–ï–ê–õ–¨–ù–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
      final requiredFiles = _getCorrectModelFiles(modelKey, scaleFactor, noise);
      print(
          'üìÅ –¢—Ä–µ–±—É–µ–º—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è $modelKey (scale=$scaleFactor, noise=$noise): $requiredFiles');

      bool allFilesExist = true;
      List<String> missingFiles = [];

      for (final fileName in requiredFiles) {
        final filePath = path.join(modelPath, fileName);
        if (!await File(filePath).exists()) {
          print('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $filePath');
          missingFiles.add(fileName);
          allFilesExist = false;
        } else {
          final fileSize = await File(filePath).length();
          print('‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: $filePath (${fileSize} bytes)');
        }
      }

      if (allFilesExist && requiredFiles.isNotEmpty) {
        print('‚úÖ –í–°–ï –§–ê–ô–õ–´ –ù–ê–ô–î–ï–ù–´ –¥–ª—è –º–æ–¥–µ–ª–∏: $modelKey');
        return {
          'name': modelKey,
          'path': modelPath,
        };
      } else {
        print('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –≤ $modelKey: $missingFiles');
      }
    }

    // FALLBACK: –ø—Ä–æ–±—É–µ–º —Å–∞–º—ã–µ –±–∞–∑–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    print('üîÑ Fallback - –∏—â–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏ cunet...');
    final fallbackPath = executableManager.getModelPath('cunet');

    // –ü—Ä–æ–±—É–µ–º —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –¢–û–ß–ù–û –µ—Å—Ç—å –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
    final basicFilesToTry = [
      [
        'noise0_scale2.0x_model.param',
        'noise0_scale2.0x_model.bin'
      ], // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1
      ['noise0_model.param', 'noise0_model.bin'], // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2
      [
        'noise1_scale2.0x_model.param',
        'noise1_scale2.0x_model.bin'
      ], // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3
    ];

    for (final basicFiles in basicFilesToTry) {
      bool basicExists = true;
      for (final file in basicFiles) {
        final filePath = path.join(fallbackPath, file);
        if (!await File(filePath).exists()) {
          basicExists = false;
          break;
        }
      }

      if (basicExists) {
        print('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å cunet: ${basicFiles.join(", ")}');
        return {
          'name': 'cunet-basic',
          'path': fallbackPath,
        };
      }
    }

    throw Exception(
        '‚ùå –ù–ò –û–î–ù–ê –ú–û–î–ï–õ–¨ –ù–ï –ù–ê–ô–î–ï–ù–ê! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –≤ $fallbackPath');
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –†–ï–ê–õ–¨–ù–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
  List<String> _getCorrectModelFiles(String modelType, int scale, int noise) {
    final files = <String>[];

    print('üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è $modelType, scale=$scale, noise=$noise');

    if (modelType == 'cunet') {
      // –°–æ–≥–ª–∞—Å–Ω–æ –†–ï–ê–õ–¨–ù–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:
      // noise0_model.bin/param - —Ç–æ–ª—å–∫–æ noise –±–µ–∑ scale
      // noise0_scale2.0x_model.bin/param - noise + scale 2x
      if (scale == 2 && noise >= 0) {
        // –ö–æ–º–±–∏–Ω–∞—Ü–∏—è noise + scale –¥–ª—è 2x (–ü–†–ò–û–†–ò–¢–ï–¢ - –µ—Å—Ç—å –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
        files.addAll([
          'noise${noise}_scale2.0x_model.param',
          'noise${noise}_scale2.0x_model.bin'
        ]);
        print('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º noise${noise}_scale2.0x —Ñ–∞–π–ª—ã');
      } else if (noise >= 0) {
        // –¢–æ–ª—å–∫–æ noise –±–µ–∑ scale (FALLBACK - –µ—Å—Ç—å –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
        files.addAll(['noise${noise}_model.param', 'noise${noise}_model.bin']);
        print('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º noise${noise} —Ñ–∞–π–ª—ã (–±–µ–∑ scale)');
      }
    } else if (modelType == 'anime') {
      // –î–ª—è anime –º–æ–¥–µ–ª–∏ –ø—Ä–æ–±—É–µ–º –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      if (scale == 2 && noise >= 0) {
        files.addAll([
          'noise${noise}_scale2.0x_model.param',
          'noise${noise}_scale2.0x_model.bin'
        ]);
      } else if (noise >= 0) {
        files.addAll(['noise${noise}_model.param', 'noise${noise}_model.bin']);
      }
    } else if (modelType == 'photo') {
      // –î–ª—è photo –º–æ–¥–µ–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
      if (scale == 2 && noise >= 0) {
        files.addAll([
          'noise${noise}_scale2.0x_model.param',
          'noise${noise}_scale2.0x_model.bin'
        ]);
      }
    }

    print('üìÅ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è $modelType: $files');
    return files;
  }

  // CPU Fallback —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  Future<void> _upscaleFramesCPUFallback(
      String framesDir,
      String scaledDir,
      String waifu2xPath,
      Map<String, String> modelInfo,
      int scaleFactor,
      int noise,
      List<FileSystemEntity> framesList) async {
    print('üîÑ CPU FALLBACK —Ä–µ–∂–∏–º');

    // –û—á–∏—â–∞–µ–º scaled –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    await Directory(scaledDir).delete(recursive: true);
    await Directory(scaledDir).create();

    final args = [
      '-i', framesDir,
      '-o', scaledDir,
      '-n', '0', // –ë–µ–∑ noise –¥–ª—è CPU
      '-s', scaleFactor.toString(),
      '-m', modelInfo['path']!,
      '-g', '-1', // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ CPU
      '-t', '32', // –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π tilesize
      '-j', '1:1:1', // –û–¥–∏–Ω –ø–æ—Ç–æ–∫
      '-f', 'png',
    ];

    print('üöÄ CPU –∫–æ–º–∞–Ω–¥–∞: ${args.join(' ')}');

    final process = await Process.start(waifu2xPath, args);

    String cpuOutput = '';
    String cpuErrorOutput = '';

    process.stdout.transform(SystemEncoding().decoder).listen((data) {
      cpuOutput += data;
      print('üì§ CPU stdout: $data');
    });

    process.stderr.transform(SystemEncoding().decoder).listen((data) {
      cpuErrorOutput += data;
      if (!data.contains('find_blob_index_by_name')) {
        print('üì• CPU stderr: $data');
      }
    });

    final exitCode = await process.exitCode;

    final scaledFrames = await Directory(scaledDir)
        .list()
        .where((entity) => entity is File && entity.path.endsWith('.png'))
        .toList();

    if (scaledFrames.length < framesList.length * 0.8) {
      throw Exception(
          'CPU fallback –Ω–µ—É–¥–∞—á–µ–Ω. –ö–æ–¥: $exitCode, –∫–∞–¥—Ä–æ–≤: ${scaledFrames.length}/${framesList.length}');
    }

    print('‚úÖ CPU fallback —É—Å–ø–µ—à–µ–Ω: ${scaledFrames.length} –∫–∞–¥—Ä–æ–≤');
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å–±–æ—Ä–∫–∞ –≤–∏–¥–µ–æ —Å –ü–†–û–°–¢–´–ú–ò –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  Future<String> _assembleVideo(
    String scaledDir,
    String audioPath,
    ProcessingConfig config,
    bool hasAudio,
    Map<String, dynamic> optimizedParams,
  ) async {
    final executableManager = ExecutableManager();
    final ffmpegPath = executableManager.ffmpegPath;

    print('üé¨ –£–ü–†–û–©–ï–ù–ù–ê–Ø —Å–±–æ—Ä–∫–∞ –≤–∏–¥–µ–æ: $scaledDir -> ${config.outputPath}');

    // –ü–†–û–í–ï–†–Ø–ï–ú —á—Ç–æ –∫–∞–¥—Ä—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    final scaledFrames = await Directory(scaledDir)
        .list()
        .where((entity) => entity is File && entity.path.endsWith('.png'))
        .toList();

    if (scaledFrames.isEmpty) {
      throw Exception('–ù–µ—Ç –∫–∞–¥—Ä–æ–≤ –¥–ª—è —Å–±–æ—Ä–∫–∏ –≤–∏–¥–µ–æ –≤: $scaledDir');
    }

    print('üì∏ –ù–∞–π–¥–µ–Ω–æ –∫–∞–¥—Ä–æ–≤ –¥–ª—è —Å–±–æ—Ä–∫–∏: ${scaledFrames.length}');

    // –ü–†–û–°–¢–´–ï –ü–ê–†–ê–ú–ï–¢–†–´
    final List<String> args = [
      '-y', // –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
      '-framerate', '30', // –£–ü–†–û–©–ï–ù–û: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π framerate
      '-i', path.join(scaledDir, 'frame_%06d.png'),

      // –ü–†–û–°–¢–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã H.264 –≤–º–µ—Å—Ç–æ —Å–ª–æ–∂–Ω–æ–≥–æ H.265
      '-c:v', 'libx264', // –ò–ó–ú–ï–ù–ï–ù–û: –ø—Ä–æ—Å—Ç–æ–π H.264
      '-crf', '18', // –£–ü–†–û–©–ï–ù–û: —Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
      '-preset', 'medium', // –£–ü–†–û–©–ï–ù–û: —Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å
      '-pix_fmt', 'yuv420p', // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

      // –£–ë–ò–†–ê–ï–ú –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
      // -video_track_timescale, -maxrate, -bufsize, -b:v

      '-r', '30', // –í—ã—Ö–æ–¥–Ω–æ–π framerate
    ];

    // –£–ü–†–û–©–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
    if (hasAudio && await File(audioPath).exists()) {
      print('üîä –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É');
      args.addAll([
        '-i',
        audioPath,
        '-c:a',
        'aac',
        '-b:a',
        '128k',
        '-shortest',
      ]);
    } else {
      print('üîá –í–∏–¥–µ–æ –±–µ–∑ –∞—É–¥–∏–æ');
      args.add('-an');
    }

    // –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    args.addAll([
      '-movflags',
      '+faststart',
      config.outputPath,
    ]);

    print('üöÄ –£–ü–†–û–©–ï–ù–ù–ê–Ø –∫–æ–º–∞–Ω–¥–∞ FFmpeg: ${args.join(' ')}');

    final result =
        await Process.run(ffmpegPath, args, runInShell: Platform.isWindows);

    print('üìä FFmpeg —Ä–µ–∑—É–ª—å—Ç–∞—Ç:');
    print('Exit code: ${result.exitCode}');
    print('STDOUT: ${result.stdout}');
    print('STDERR: ${result.stderr}');

    if (result.exitCode != 0) {
      // –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ø–æ–¥—Ö–æ–¥ –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
      print('üîÑ –ü—Ä–æ–±—É–µ–º –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–£–Æ –∫–æ–º–∞–Ω–¥—É...');
      return await _assembleVideoAlternative(scaledDir, config);
    }

    final outputFile = File(config.outputPath);
    if (!await outputFile.exists()) {
      throw Exception('–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω: ${config.outputPath}');
    }

    final outputSize = await outputFile.length();
    final outputSizeMB = (outputSize / 1024 / 1024);

    print('üìπ –í–∏–¥–µ–æ —Å–æ–±—Ä–∞–Ω–æ: ${outputSizeMB.toStringAsFixed(2)} MB');

    if (outputSize < 1024 * 1024) {
      print('üîÑ –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥...');
      return await _assembleVideoAlternative(scaledDir, config);
    }

    return config.outputPath;
  }

  // –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –º–µ—Ç–æ–¥ —Å–±–æ—Ä–∫–∏
  Future<String> _assembleVideoAlternative(
      String scaledDir, ProcessingConfig config) async {
    final executableManager = ExecutableManager();
    final ffmpegPath = executableManager.ffmpegPath;

    print('üîÑ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–ê–Ø —Å–±–æ—Ä–∫–∞ –≤–∏–¥–µ–æ (–º–µ—Ç–æ–¥ –∏–∑ Reddit)');

    // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–†–û–°–¢–ê–Ø –∫–æ–º–∞–Ω–¥–∞
    final List<String> args = [
      '-y',
      '-framerate', '30',
      '-i', path.join(scaledDir, 'frame_%06d.png'),
      '-c:v', 'libx264',
      '-crf', '23', // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
      '-pix_fmt', 'yuv420p',
      '-an', // –ë–µ–∑ –∞—É–¥–∏–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
      config.outputPath,
    ];

    print('üöÄ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–ê–Ø –∫–æ–º–∞–Ω–¥–∞: ${args.join(' ')}');

    final result =
        await Process.run(ffmpegPath, args, runInShell: Platform.isWindows);

    print('üìä –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:');
    print('Exit code: ${result.exitCode}');
    print('STDERR: ${result.stderr}');

    if (result.exitCode != 0) {
      throw Exception('–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: ${result.stderr}');
    }

    final outputFile = File(config.outputPath);
    final outputSize = await outputFile.length();
    final outputSizeMB = (outputSize / 1024 / 1024);

    print('üìπ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û–ï –≤–∏–¥–µ–æ: ${outputSizeMB.toStringAsFixed(2)} MB');

    if (outputSize < 500 * 1024) {
      // –ú–µ–Ω—å—à–µ 500KB –≤—Å–µ –µ—â–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
      throw Exception(
          '–î–∞–∂–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å–æ–∑–¥–∞–ª–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –≤–∏–¥–µ–æ');
    }

    return config.outputPath;
  }

  // –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–∞–¥—Ä–æ–≤ (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
  Future<void> _diagnoseFramesBeforeAssembly(String scaledDir) async {
    print('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–ê–î–†–û–í –ü–û–°–õ–ï –û–ë–†–ê–ë–û–¢–ö–ò');

    final scaledFrames = await Directory(scaledDir)
        .list()
        .where((entity) => entity is File && entity.path.endsWith('.png'))
        .cast<File>()
        .toList();

    if (scaledFrames.isEmpty) {
      throw Exception('‚ùå –ù–ï–¢ –ö–ê–î–†–û–í –¥–ª—è —Å–±–æ—Ä–∫–∏ –≤–∏–¥–µ–æ!');
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    scaledFrames
        .sort((a, b) => path.basename(a.path).compareTo(path.basename(b.path)));

    print('üì∏ –í—Å–µ–≥–æ –∫–∞–¥—Ä–æ–≤: ${scaledFrames.length}');
    print('üì∏ –ü–µ—Ä–≤—ã–π –∫–∞–¥—Ä: ${path.basename(scaledFrames.first.path)}');
    print('üì∏ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–¥—Ä: ${path.basename(scaledFrames.last.path)}');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–¥—Ä–æ–≤
    for (int i = 0; i < min(5, scaledFrames.length); i++) {
      final frame = scaledFrames[i];
      final size = await frame.length();
      final sizeKB = (size / 1024).toStringAsFixed(1);
      print('üì∏ ${path.basename(frame.path)}: ${sizeKB} KB');

      if (size < 1024) {
        // –ú–µ–Ω—å—à–µ 1KB - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
        print('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ö–∞–¥—Ä —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π!');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö –∫–∞–¥—Ä–æ–≤
    int totalSize = 0;
    for (final frame in scaledFrames) {
      totalSize += await frame.length();
    }
    final totalSizeMB = (totalSize / 1024 / 1024);
    print('üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∫–∞–¥—Ä–æ–≤: ${totalSizeMB.toStringAsFixed(2)} MB');
  }

  // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏
  Future<void> diagnoseModelFiles(ExecutableManager executableManager) async {
    print('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –§–ê–ô–õ–û–í –ú–û–î–ï–õ–ò');

    for (final modelType in ['cunet', 'anime', 'photo']) {
      final modelPath = executableManager.getModelPath(modelType);
      print('\nüìÅ –ú–æ–¥–µ–ª—å: $modelType -> $modelPath');

      if (!await Directory(modelPath).exists()) {
        print('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        continue;
      }

      final files = await Directory(modelPath)
          .list()
          .where((entity) => entity is File)
          .cast<File>()
          .toList();

      print('üìÑ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}');

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      files.sort(
          (a, b) => path.basename(a.path).compareTo(path.basename(b.path)));

      for (final file in files) {
        final name = path.basename(file.path);
        final size = await file.length();
        final sizeKB = (size / 1024).toStringAsFixed(1);
        print('  üìÑ $name (${sizeKB} KB)');
      }
    }
  }

  Future<void> _cleanupTempFiles() async {
    if (_tempBasePath != null) {
      try {
        final tempDir = Directory(_tempBasePath!);
        if (await tempDir.exists()) {
          await tempDir.delete(recursive: true);
          print('–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã: $_tempBasePath');
        }
      } catch (e) {
        print('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: $e');
      }
      _tempBasePath = null;
    }
  }

  void _updateProgress(String message, double percentage) {
    _progressController.add(message);
    _percentageController.add(percentage);
    print('Progress ($percentage%): $message');
  }

  Future<Map<String, dynamic>> getVideoInfo(String videoPath) async {
    return await _analyzeInputVideo(videoPath);
  }

  void stopProcessing() {
    if (_isProcessing) {
      _updateProgress('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏...', 0.0);
      _cleanupTempFiles();
      _isProcessing = false;
    }
  }

  void dispose() {
    stopProcessing();
    _progressController.close();
    _percentageController.close();
  }
}
