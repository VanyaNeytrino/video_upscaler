import 'dart:io';
import 'dart:async';
import 'dart:math';
import 'package:path/path.dart' as path;
import 'package:video_upscaler/models/processing_config.dart';
import 'package:video_upscaler/services/executable_manager.dart';
import 'package:video_upscaler/services/system_info_service.dart';

class VideoProcessingService {
  final StreamController<String> _progressController =
      StreamController<String>.broadcast();
  final StreamController<double> _percentageController =
      StreamController<double>.broadcast();

  Stream<String> get progressStream => _progressController.stream;
  Stream<double> get percentageStream => _percentageController.stream;

  bool _isProcessing = false;
  String? _tempBasePath;

  bool get isProcessing => _isProcessing;

  Future<String> processVideo(ProcessingConfig config) async {
    if (_isProcessing) {
      throw Exception('–£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ');
    }

    _isProcessing = true;

    try {
      _updateProgress('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ExecutableManager...', 0.0);
      final executableManager = ExecutableManager();

      if (!await executableManager.validateInstallation()) {
        throw Exception(
            'ExecutableManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.');
      }

      _updateProgress('–ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...', 5.0);
      final systemInfo = await SystemInfoService.analyzeSystem();

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ö–æ–¥–Ω–æ–º –≤–∏–¥–µ–æ
      final videoInfo = await _analyzeInputVideo(config.inputVideoPath);

      // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥ –∂–µ–ª–µ–∑–æ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
      final optimizedParams =
          await _getOptimizedParameters(systemInfo, videoInfo, config);

      print('=== –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ ===');
      print('–°–∏—Å—Ç–µ–º–∞: ${systemInfo.systemSummary}');
      print(
          '–í—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ: ${videoInfo['width']}x${videoInfo['height']} @ ${videoInfo['fps']}fps');
      print(
          '–í—ã—Ö–æ–¥–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: ${optimizedParams['output_width']}x${optimizedParams['output_height']}');
      print('–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: $optimizedParams');

      _updateProgress('–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...', 10.0);
      final tempDir = await _createTempDirectories();

      _updateProgress('–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤ –∏–∑ –≤–∏–¥–µ–æ...', 15.0);
      await _extractFrames(
          config.inputVideoPath, tempDir['frames']!, optimizedParams);

      _updateProgress('–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏...', 25.0);
      final hasAudio =
          await _extractAudio(config.inputVideoPath, tempDir['audio']!);

      _updateProgress('AI –∞–ø—Å–∫–µ–π–ª–∏–Ω–≥ –∫–∞–¥—Ä–æ–≤...', 30.0);
      await _upscaleFrames(tempDir['frames']!, tempDir['scaled']!, config,
          systemInfo, optimizedParams);

      _updateProgress('–°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ...', 85.0);
      final outputPath = await _assembleVideo(tempDir['scaled']!,
          tempDir['audio']!, config, hasAudio, optimizedParams);

      _updateProgress('–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...', 95.0);
      await _cleanupTempFiles();

      _updateProgress('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 100.0);
      return outputPath;
    } catch (e) {
      _updateProgress('–û—à–∏–±–∫–∞: $e', 0.0);
      await _cleanupTempFiles();
      rethrow;
    } finally {
      _isProcessing = false;
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  Future<Map<String, dynamic>> _analyzeInputVideo(String videoPath) async {
    final executableManager = ExecutableManager();
    final ffmpegPath = executableManager.ffmpegPath;

    print('üé¨ –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ: $videoPath');

    final result = await Process.run(
        ffmpegPath,
        [
          '-i',
          videoPath,
          '-hide_banner',
        ],
        runInShell: Platform.isWindows);

    final output = result.stderr.toString();
    print('üìπ FFmpeg –≤—ã–≤–æ–¥: $output');

    // –£–õ–£–ß–®–ï–ù–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
    final RegExp resolutionRegex =
        RegExp(r'(\d{2,})x(\d{2,})'); // –ú–∏–Ω–∏–º—É–º 2 —Ü–∏—Ñ—Ä—ã
    final RegExp fpsRegex = RegExp(r'(\d+(?:\.\d+)?)\s*fps');
    final RegExp bitrateRegex = RegExp(r'(\d+)\s*kb/s');

    final resolutionMatch = resolutionRegex.firstMatch(output);
    final fpsMatch = fpsRegex.firstMatch(output);
    final bitrateMatch = bitrateRegex.firstMatch(output);

    final width =
        resolutionMatch != null ? int.parse(resolutionMatch.group(1)!) : 1920;
    final height =
        resolutionMatch != null ? int.parse(resolutionMatch.group(2)!) : 1080;
    final fps = fpsMatch != null ? double.parse(fpsMatch.group(1)!) : 30.0;
    final bitrate =
        bitrateMatch != null ? int.parse(bitrateMatch.group(1)!) : 5000;

    print(
        'üìê –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: ${width}x${height} @ ${fps}fps, –±–∏—Ç—Ä–µ–π—Ç: ${bitrate}kb/s');

    return {
      'width': width,
      'height': height,
      'fps': fps,
      'bitrate': bitrate,
      'raw_info': output,
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥ –∂–µ–ª–µ–∑–æ
  Future<Map<String, dynamic>> _getOptimizedParameters(
      SystemCapabilities systemInfo,
      Map<String, dynamic> videoInfo,
      ProcessingConfig config) async {
    final inputWidth = videoInfo['width'] as int;
    final inputHeight = videoInfo['height'] as int;
    final inputFPS = videoInfo['fps'] as double;
    final scaleFactor = config.scaleFactor;

    final outputWidth = inputWidth * scaleFactor;
    final outputHeight = inputHeight * scaleFactor;
    final totalPixels = outputWidth * outputHeight;

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã waifu2x –Ω–∞ –æ—Å–Ω–æ–≤–µ –∂–µ–ª–µ–∑–∞
    Map<String, dynamic> waifu2xParams =
        _getWaifu2xParameters(systemInfo, scaleFactor);

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã FFmpeg –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ –∂–µ–ª–µ–∑–∞
    Map<String, dynamic> ffmpegParams = _getFFmpegParameters(
        systemInfo,
        inputWidth,
        inputHeight,
        outputWidth,
        outputHeight,
        inputFPS,
        scaleFactor);

    return {
      'output_width': outputWidth,
      'output_height': outputHeight,
      'total_pixels': totalPixels,
      'waifu2x': waifu2xParams,
      'ffmpeg': ffmpegParams,
    };
  }

  // –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã waifu2x –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
  Map<String, dynamic> _getWaifu2xParameters(
      SystemCapabilities systemInfo, int scaleFactor) {
    final memoryGB = systemInfo.totalMemoryGB;
    final cpuCores = systemInfo.cpuCores;
    final platform = systemInfo.platform;

    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú scale factor - —Ç–æ–ª—å–∫–æ 1, 2, 4 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è!
    int validScaleFactor = scaleFactor;
    if (![1, 2, 4].contains(validScaleFactor)) {
      if (validScaleFactor == 3) {
        validScaleFactor = 2; // 3x –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        print('‚ö†Ô∏è –ú–∞—Å—à—Ç–∞–± 3x –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º 2x');
      } else if (validScaleFactor > 4) {
        validScaleFactor = 4; // –ú–∞–∫—Å–∏–º—É–º 4x
        print('‚ö†Ô∏è –ú–∞—Å—à—Ç–∞–± –±–æ–ª—å—à–µ 4x –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º 4x');
      } else {
        validScaleFactor = 2; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 2x
        print('‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–∞—Å—à—Ç–∞–±, –∏—Å–ø–æ–ª—å–∑—É–µ–º 2x');
      }
    }

    int tileSize = 0; // auto –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    int threads = (cpuCores / 2).round().clamp(1, 4);
    int gpuDevice = 0; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é GPU

    // –ü–ª–∞—Ç—Ñ–æ—Ä–º–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (platform == 'macos') {
      // Apple Silicon - –û–ß–ï–ù–¨ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ
      gpuDevice = 0;
      if (validScaleFactor >= 4) {
        tileSize = 32; // –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –¥–ª—è 4x
      } else if (validScaleFactor >= 2) {
        tileSize = 64; // –ú–∞–ª–µ–Ω—å–∫–∏–π –¥–ª—è 2x
      } else {
        tileSize = 0; // auto –¥–ª—è 1x
      }
      print(
          'üçé Apple Silicon: GPU=0, tileSize=$tileSize –¥–ª—è ${validScaleFactor}x');
    } else if (platform == 'windows' || platform == 'linux') {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
      if (systemInfo.supportsGPU && systemInfo.availableGPUs.isNotEmpty) {
        gpuDevice = 0;
        if (memoryGB >= 16) {
          tileSize = validScaleFactor >= 4 ? 200 : 400;
        } else if (memoryGB >= 8) {
          tileSize = validScaleFactor >= 4 ? 100 : 200;
        } else {
          tileSize = 100;
        }
      } else {
        // CPU fallback
        gpuDevice = -1;
        tileSize = validScaleFactor >= 4 ? 50 : 100;
        threads = cpuCores.clamp(1, 8);
      }
    }

    return {
      'tile_size': tileSize,
      'threads': threads,
      'gpu_device': gpuDevice,
      'use_gpu': gpuDevice >= 0,
      'valid_scale_factor': validScaleFactor,
    };
  }

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã FFmpeg
  Map<String, dynamic> _getFFmpegParameters(
      SystemCapabilities systemInfo,
      int inputWidth,
      int inputHeight,
      int outputWidth,
      int outputHeight,
      double inputFPS,
      int scaleFactor) {
    final totalPixels = outputWidth * outputHeight;
    final memoryGB = systemInfo.totalMemoryGB;

    // –í—ã–±–æ—Ä –∫–æ–¥–µ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    String videoCodec = 'libx264';
    String preset = 'medium';
    int crf = 23;
    String pixFormat = 'yuv420p';

    // –î–ª—è –≤—ã—Å–æ–∫–∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º H.265
    if (totalPixels >= 3840 * 2160) {
      // 4K –∏ –≤—ã—à–µ
      videoCodec = 'libx265';
      crf = 18; // –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è 4K
      preset = memoryGB >= 16 ? 'slow' : 'medium';
      pixFormat = 'yuv420p10le'; // 10-bit –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    } else if (totalPixels >= 2560 * 1440) {
      // 1440p
      videoCodec = 'libx264';
      crf = 20;
      preset = memoryGB >= 8 ? 'slow' : 'medium';
    } else {
      // 1080p –∏ –Ω–∏–∂–µ
      crf = 23;
      preset = 'medium';
    }

    // –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∏—Ç—Ä–µ–π—Ç–∞
    final bitrate = _calculateOptimalBitrate(
        outputWidth, outputHeight, inputFPS, scaleFactor);
    final maxrate = (bitrate * 1.5).round();
    final bufsize = maxrate * 2;

    return {
      'video_codec': videoCodec,
      'preset': preset,
      'crf': crf,
      'pix_format': pixFormat,
      'bitrate': '${bitrate}k',
      'maxrate': '${maxrate}k',
      'bufsize': '${bufsize}k',
      'fps': inputFPS.round(),
    };
  }

  // –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∏—Ç—Ä–µ–π—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
  int _calculateOptimalBitrate(
      int width, int height, double fps, int scaleFactor) {
    final totalPixels = width * height;
    final pixelsPerSecond = totalPixels * fps;

    // –ë–∞–∑–æ–≤—ã–π –±–∏—Ç—Ä–µ–π—Ç –Ω–∞ –ø–∏–∫—Å–µ–ª—å (–±–∏—Ç/–ø–∏–∫—Å–µ–ª—å/—Å–µ–∫—É–Ω–¥–∞)
    double bitsPerPixel;

    if (totalPixels >= 3840 * 2160) {
      // 4K
      bitsPerPixel = 0.15; // –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è 4K
    } else if (totalPixels >= 2560 * 1440) {
      // 1440p
      bitsPerPixel = 0.12;
    } else if (totalPixels >= 1920 * 1080) {
      // 1080p
      bitsPerPixel = 0.10;
    } else {
      // –ù–∏–∂–µ 1080p
      bitsPerPixel = 0.08;
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∏—Ç—Ä–µ–π—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–∞—Å—à—Ç–∞–±–æ–≤ (–±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π)
    if (scaleFactor >= 4) {
      bitsPerPixel *= 1.5;
    } else if (scaleFactor >= 2) {
      bitsPerPixel *= 1.2;
    }

    final bitrateKbps = (pixelsPerSecond * bitsPerPixel / 1000).round();

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    return bitrateKbps.clamp(1000, 50000); // –û—Ç 1Mbps –¥–æ 50Mbps
  }

  Future<Map<String, String>> _createTempDirectories() async {
    final tempBase = await Directory.systemTemp.createTemp('video_upscaler_');
    _tempBasePath = tempBase.path;

    final directories = {
      'frames': path.join(tempBase.path, 'frames'),
      'scaled': path.join(tempBase.path, 'scaled'),
      'audio': path.join(tempBase.path, 'audio.mp3'),
    };

    for (final entry in directories.entries) {
      if (!entry.key.contains('audio')) {
        await Directory(entry.value).create(recursive: true);
      }
    }

    print('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã –≤: ${tempBase.path}');
    return directories;
  }

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤
  Future<void> _extractFrames(
      String videoPath, String framesDir, Map<String, dynamic> params) async {
    final executableManager = ExecutableManager();
    final ffmpegPath = executableManager.ffmpegPath;
    final ffmpegParams = params['ffmpeg'] as Map<String, dynamic>;

    print('–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤: $videoPath -> $framesDir');

    final args = [
      '-i', videoPath,
      '-vf', 'fps=${ffmpegParams['fps']}', // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π FPS
      path.join(framesDir, 'frame_%06d.png'),
      '-hide_banner',
      '-loglevel', 'error',
    ];

    final result =
        await Process.run(ffmpegPath, args, runInShell: Platform.isWindows);

    if (result.exitCode != 0) {
      throw Exception('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤: ${result.stderr}');
    }

    final framesList = await Directory(framesDir).list().toList();
    print('–ò–∑–≤–ª–µ—á–µ–Ω–æ –∫–∞–¥—Ä–æ–≤: ${framesList.length}');
  }

  Future<bool> _extractAudio(String videoPath, String audioPath) async {
    final executableManager = ExecutableManager();
    final ffmpegPath = executableManager.ffmpegPath;

    print('–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ: $videoPath -> $audioPath');

    final result = await Process.run(
        ffmpegPath,
        [
          '-i',
          videoPath,
          '-vn',
          '-acodec',
          'copy',
          audioPath,
          '-hide_banner',
          '-loglevel',
          'error',
        ],
        runInShell: Platform.isWindows);

    final audioFile = File(audioPath);
    final hasAudio = await audioFile.exists() && await audioFile.length() > 0;

    if (!hasAudio) {
      print('–í–∏–¥–µ–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É –∏–ª–∏ –∞—É–¥–∏–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å');
    } else {
      print('–ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    }

    return hasAudio;
  }

  // –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù–ù–´–ô —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∞–ø—Å–∫–µ–π–ª–∏–Ω–≥–∞
  Future<void> _upscaleFrames(
    String framesDir,
    String scaledDir,
    ProcessingConfig config,
    SystemCapabilities systemInfo,
    Map<String, dynamic> optimizedParams,
  ) async {
    final executableManager = ExecutableManager();
    final waifu2xPath = executableManager.waifu2xPath;
    final waifu2xParams = optimizedParams['waifu2x'] as Map<String, dynamic>;

    print('üéØ –ù–∞—á–∏–Ω–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–ø—Å–∫–µ–π–ª–∏–Ω–≥');
    print('‚öôÔ∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${systemInfo.platform}');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ waifu2x —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!await File(waifu2xPath).exists()) {
      throw Exception('waifu2x-ncnn-vulkan –Ω–µ –Ω–∞–π–¥–µ–Ω: $waifu2xPath');
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π scale factor
    final validScaleFactor = waifu2xParams['valid_scale_factor'] as int;

    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú noise level - —Ç–æ–ª—å–∫–æ -1, 0, 1, 2, 3
    int validNoise = config.scaleNoise.clamp(-1, 3);
    if (validNoise != config.scaleNoise) {
      print('‚ö†Ô∏è Noise level –∏—Å–ø—Ä–∞–≤–ª–µ–Ω —Å ${config.scaleNoise} –Ω–∞ $validNoise');
    }

    // –ü–û–õ–£–ß–ê–ï–ú –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
    final modelInfo = await _getValidModel(
        executableManager, config.modelType, validScaleFactor, validNoise);

    print('üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: ${modelInfo['path']}');
    print('üìê –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: scale=${validScaleFactor}x, noise=$validNoise');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–¥—Ä—ã
    final framesList = await Directory(framesDir)
        .list()
        .where((entity) => entity is File && entity.path.endsWith('.png'))
        .toList();

    if (framesList.isEmpty) {
      throw Exception('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–∞–¥—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤: $framesDir');
    }

    print('üì∏ –ù–∞–π–¥–µ–Ω–æ –∫–∞–¥—Ä–æ–≤: ${framesList.length}');

    // –°–û–ë–ò–†–ê–ï–ú –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    final args = [
      '-i', framesDir,
      '-o', scaledDir,
      '-n', validNoise.toString(),
      '-s', validScaleFactor.toString(),
      '-m', modelInfo['path']!,
      '-g', waifu2xParams['gpu_device'].toString(),
      '-f', 'png', // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º tilesize –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (waifu2xParams['tile_size'] > 0) {
      args.addAll(['-t', waifu2xParams['tile_size'].toString()]);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è CPU —Ä–µ–∂–∏–º–∞
    if (waifu2xParams['gpu_device'] == -1) {
      final threads = waifu2xParams['threads'];
      args.addAll(['-j', '$threads:$threads:$threads']);
    }

    // Verbose –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    args.add('-v');

    print('üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${args.join(' ')}');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    final process =
        await Process.start(waifu2xPath, args, runInShell: Platform.isWindows);

    String output = '';
    String errorOutput = '';
    int processedFrames = 0;
    bool hasCriticalError = false;

    process.stdout.transform(SystemEncoding().decoder).listen((data) {
      output += data;
      print('üì§ stdout: $data');

      // –ü–∞—Ä—Å–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      if (data.contains('processing') || data.contains('.png')) {
        processedFrames++;
        if (processedFrames % 10 == 0) {
          final progressPercent =
              (processedFrames / framesList.length * 50).clamp(0, 50);
          _updateProgress(
              'AI –∞–ø—Å–∫–µ–π–ª–∏–Ω–≥: $processedFrames/${framesList.length} –∫–∞–¥—Ä–æ–≤...',
              30.0 + progressPercent);
        }
      }
    });

    process.stderr.transform(SystemEncoding().decoder).listen((data) {
      errorOutput += data;
      print('üì• stderr: $data');

      // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º find_blob_index_by_name
      if (!data.contains('find_blob_index_by_name') &&
          (data.toLowerCase().contains('failed') ||
              data.toLowerCase().contains('error') ||
              data.toLowerCase().contains('segmentation fault') ||
              data.toLowerCase().contains('illegal instruction') ||
              data.toLowerCase().contains('out of memory'))) {
        print('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: $data');
        hasCriticalError = true;
      }
    });

    final exitCode = await process.exitCode;

    print('‚ö° waifu2x –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: $exitCode');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ù–ï–ó–ê–í–ò–°–ò–ú–û –æ—Ç –æ—à–∏–±–æ–∫ –≤ stderr
    final scaledFrames = await Directory(scaledDir)
        .list()
        .where((entity) => entity is File && entity.path.endsWith('.png'))
        .toList();

    print('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${scaledFrames.length}/${framesList.length} –∫–∞–¥—Ä–æ–≤');

    // –ï—Å–ª–∏ –∫–∞–¥—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º find_blob_index_by_name –æ—à–∏–±–∫–∏
    if (scaledFrames.length == framesList.length) {
      print('‚úÖ –ê–ø—Å–∫–µ–π–ª–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ stderr –æ—à–∏–±–∫–∏');
      return;
    }

    // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - –ø—Ä–æ–±—É–µ–º CPU fallback
    if (exitCode != 0 || hasCriticalError || scaledFrames.length == 0) {
      print('‚ùå –û–®–ò–ë–ö–ê waifu2x, –ø—Ä–æ–±—É–µ–º CPU fallback:');
      print('Exit code: $exitCode');
      print('STDERR: $errorOutput');

      if (waifu2xParams['gpu_device'] != -1) {
        print('üîÑ –ü—Ä–æ–±—É–µ–º CPU fallback...');
        await _upscaleFramesCPUFallback(framesDir, scaledDir, waifu2xPath,
            modelInfo, validScaleFactor, validNoise, framesList);
        return;
      }

      throw Exception(
          '–û—à–∏–±–∫–∞ waifu2x –∏ CPU fallback (–∫–æ–¥: $exitCode):\n$errorOutput');
    }

    if (scaledFrames.length != framesList.length) {
      throw Exception(
          '–û–±—Ä–∞–±–æ—Ç–∞–Ω—ã –Ω–µ –≤—Å–µ –∫–∞–¥—Ä—ã: ${scaledFrames.length}/${framesList.length}');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–π –º–æ–¥–µ–ª–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
  Future<Map<String, String>> _getValidModel(
      ExecutableManager executableManager,
      String? modelType,
      int scaleFactor,
      int noise) async {
    final modelTypes = {
      'cunet': 'models-cunet',
      'anime': 'models-upconv_7_anime_style_art_rgb',
      'photo': 'models-upconv_7_photo',
    };

    String selectedModel = modelTypes[modelType] ?? 'models-cunet';
    String modelPath = executableManager.getModelPath(modelType ?? 'cunet');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥–µ–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!await Directory(modelPath).exists()) {
      print('‚ö†Ô∏è –ú–æ–¥–µ–ª—å $selectedModel –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ...');

      // –ü—Ä–æ–±—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
      for (final entry in modelTypes.entries) {
        final testPath = executableManager.getModelPath(entry.key);
        if (await Directory(testPath).exists()) {
          selectedModel = entry.value;
          modelPath = testPath;
          print('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ä–∞–±–æ—á–∞—è –º–æ–¥–µ–ª—å: $selectedModel');
          break;
        }
      }

      if (!await Directory(modelPath).exists()) {
        throw Exception(
            '–ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ExecutableManager.');
      }
    }

    return {
      'name': selectedModel,
      'path': modelPath,
    };
  }

  // CPU Fallback
  Future<void> _upscaleFramesCPUFallback(
      String framesDir,
      String scaledDir,
      String waifu2xPath,
      Map<String, String> modelInfo,
      int scaleFactor,
      int noise,
      List<FileSystemEntity> framesList) async {
    print('üîÑ CPU FALLBACK —Ä–µ–∂–∏–º');

    final args = [
      '-i', framesDir,
      '-o', scaledDir,
      '-n', noise.toString(),
      '-s', scaleFactor.toString(),
      '-m', modelInfo['path']!,
      '-g', '-1', // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ CPU
      '-t', '32', // –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π tilesize –¥–ª—è CPU
      '-j', '1:1:1', // –û–¥–∏–Ω –ø–æ—Ç–æ–∫
      '-f', 'png',
      '-v',
    ];

    print('üöÄ CPU –∫–æ–º–∞–Ω–¥–∞: ${args.join(' ')}');

    final process = await Process.start(waifu2xPath, args);

    String cpuOutput = '';
    String cpuErrorOutput = '';

    process.stdout.transform(SystemEncoding().decoder).listen((data) {
      cpuOutput += data;
      print('üì§ CPU stdout: $data');
    });

    process.stderr.transform(SystemEncoding().decoder).listen((data) {
      cpuErrorOutput += data;
      print('üì• CPU stderr: $data');
    });

    final exitCode = await process.exitCode;

    final scaledFrames = await Directory(scaledDir)
        .list()
        .where((entity) => entity is File && entity.path.endsWith('.png'))
        .toList();

    if (exitCode != 0 || scaledFrames.length != framesList.length) {
      throw Exception(
          'CPU fallback —Ç–æ–∂–µ –Ω–µ—É–¥–∞—á–µ–Ω. –ö–æ–¥: $exitCode, –∫–∞–¥—Ä–æ–≤: ${scaledFrames.length}/${framesList.length}');
    }

    print('‚úÖ CPU fallback —É—Å–ø–µ—à–µ–Ω: ${scaledFrames.length} –∫–∞–¥—Ä–æ–≤');
  }

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ –≤–∏–¥–µ–æ
  Future<String> _assembleVideo(
    String scaledDir,
    String audioPath,
    ProcessingConfig config,
    bool hasAudio,
    Map<String, dynamic> optimizedParams,
  ) async {
    final executableManager = ExecutableManager();
    final ffmpegPath = executableManager.ffmpegPath;
    final ffmpegParams = optimizedParams['ffmpeg'] as Map<String, dynamic>;

    print(
        '–°–±–æ—Ä–∫–∞ –≤–∏–¥–µ–æ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: $scaledDir -> ${config.outputPath}');
    print('FFmpeg –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: $ffmpegParams');

    final args = [
      '-framerate',
      ffmpegParams['fps'].toString(),
      '-i',
      path.join(scaledDir, 'frame_%06d.png'),
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (hasAudio && await File(audioPath).exists()) {
      args.addAll(['-i', audioPath]);
      args.addAll(['-c:a', config.audioCodec, '-b:a', '320k']);
    } else {
      args.addAll(['-an']);
    }

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–µ–æ
    args.addAll([
      '-c:v', ffmpegParams['video_codec'],
      '-preset', ffmpegParams['preset'],
      '-crf', ffmpegParams['crf'].toString(),
      '-pix_fmt', ffmpegParams['pix_format'],
      '-maxrate', ffmpegParams['maxrate'],
      '-bufsize', ffmpegParams['bufsize'],
      '-movflags', '+faststart', // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
      config.outputPath,
      '-hide_banner',
      '-loglevel', 'error',
      '-y',
    ]);

    print('–ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: ${args.join(' ')}');

    final result =
        await Process.run(ffmpegPath, args, runInShell: Platform.isWindows);

    if (result.exitCode != 0) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –≤–∏–¥–µ–æ: ${result.stderr}');
    }

    final outputFile = File(config.outputPath);
    if (!await outputFile.exists()) {
      throw Exception('–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω');
    }

    final outputSize = await outputFile.length();
    print(
        '–í–∏–¥–µ–æ —Å–æ–±—Ä–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ. –†–∞–∑–º–µ—Ä: ${(outputSize / 1024 / 1024).toStringAsFixed(2)} MB');

    return config.outputPath;
  }

  Future<void> _cleanupTempFiles() async {
    if (_tempBasePath != null) {
      try {
        final tempDir = Directory(_tempBasePath!);
        if (await tempDir.exists()) {
          await tempDir.delete(recursive: true);
          print('–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã: $_tempBasePath');
        }
      } catch (e) {
        print('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: $e');
      }
      _tempBasePath = null;
    }
  }

  void _updateProgress(String message, double percentage) {
    _progressController.add(message);
    _percentageController.add(percentage);
    print('Progress ($percentage%): $message');
  }

  Future<Map<String, dynamic>> getVideoInfo(String videoPath) async {
    return await _analyzeInputVideo(videoPath);
  }

  void stopProcessing() {
    if (_isProcessing) {
      _updateProgress('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏...', 0.0);
      _cleanupTempFiles();
      _isProcessing = false;
    }
  }

  void dispose() {
    stopProcessing();
    _progressController.close();
    _percentageController.close();
  }
}
