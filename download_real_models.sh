#!/bin/bash

echo "üì• –°–∫–∞—á–∏–≤–∞–µ–º –ù–ê–°–¢–û–Ø–©–ò–ï —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏ –∏–∑ GitHub Releases..."

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞  
cd "$(dirname "$0")"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–µ–π
echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –º–æ–¥–µ–ª–µ–π..."
for platform in macos windows linux; do
    mkdir -p "assets/executables/$platform/models-cunet"
    mkdir -p "assets/executables/$platform/models-upconv_7_anime_style_art_rgb"
    mkdir -p "assets/executables/$platform/models-upconv_7_photo"
done

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
TEMP_DIR="temp_models_download"
rm -rf "$TEMP_DIR"  # –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
mkdir -p "$TEMP_DIR"
cd "$TEMP_DIR"

# –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
download_with_retry() {
    local url=$1
    local output=$2
    local attempts=3
    
    for i in $(seq 1 $attempts); do
        echo "–ü–æ–ø—ã—Ç–∫–∞ $i/$attempts: —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ $output..."
        if curl -L --fail --connect-timeout 30 --max-time 600 -o "$output" "$url"; then
            if [ -f "$output" ] && [ -s "$output" ]; then
                local size=$(stat -c%s "$output" 2>/dev/null || stat -f%z "$output" 2>/dev/null || echo "0")
                local size_mb=$((size / 1024 / 1024))
                echo "‚úÖ $output —Å–∫–∞—á–∞–Ω: ${size_mb}MB"
                return 0
            else
                echo "‚ùå –§–∞–π–ª $output –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è"
            fi
        else
            echo "‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è $output (–ø–æ–ø—ã—Ç–∫–∞ $i)"
        fi
        sleep 5
    done
    
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å $output –ø–æ—Å–ª–µ $attempts –ø–æ–ø—ã—Ç–æ–∫"
    return 1
}

# –°–∫–∞—á–∏–≤–∞–µ–º –∞—Ä—Ö–∏–≤—ã
echo "üì¶ –°–∫–∞—á–∏–≤–∞–µ–º waifu2x release 20220728..."

download_with_retry "https://github.com/nihui/waifu2x-ncnn-vulkan/releases/download/20220728/waifu2x-ncnn-vulkan-20220728-macos.zip" "waifu2x-macos.zip" || exit 1
download_with_retry "https://github.com/nihui/waifu2x-ncnn-vulkan/releases/download/20220728/waifu2x-ncnn-vulkan-20220728-windows.zip" "waifu2x-windows.zip" || exit 1
download_with_retry "https://github.com/nihui/waifu2x-ncnn-vulkan/releases/download/20220728/waifu2x-ncnn-vulkan-20220728-ubuntu.zip" "waifu2x-ubuntu.zip" || exit 1

# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –°–∫–∞—á–∏–≤–∞–µ–º FFmpeg –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
echo "üì¶ –°–∫–∞—á–∏–≤–∞–µ–º FFmpeg –æ—Ç–¥–µ–ª—å–Ω–æ..."

# FFmpeg –¥–ª—è Linux
download_with_retry "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-linux64-gpl.tar.xz" "ffmpeg-linux.tar.xz" || echo "‚ö†Ô∏è FFmpeg Linux –Ω–µ —Å–∫–∞—á–∞–Ω, –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –≤ waifu2x –∞—Ä—Ö–∏–≤–µ"

# FFmpeg –¥–ª—è Windows  
download_with_retry "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip" "ffmpeg-windows.zip" || echo "‚ö†Ô∏è FFmpeg Windows –Ω–µ —Å–∫–∞—á–∞–Ω, –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –≤ waifu2x –∞—Ä—Ö–∏–≤–µ"

# FFmpeg –¥–ª—è macOS (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–º)
download_with_retry "https://evermeet.cx/ffmpeg/ffmpeg-6.1.zip" "ffmpeg-macos.zip" || echo "‚ö†Ô∏è FFmpeg macOS –Ω–µ —Å–∫–∞—á–∞–Ω, –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –≤ waifu2x –∞—Ä—Ö–∏–≤–µ"

# –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º waifu2x –∞—Ä—Ö–∏–≤—ã
echo "üìÇ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º waifu2x –∞—Ä—Ö–∏–≤—ã..."
unzip -q waifu2x-macos.zip || exit 1
unzip -q waifu2x-windows.zip || exit 1  
unzip -q waifu2x-ubuntu.zip || exit 1

# –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º FFmpeg –∞—Ä—Ö–∏–≤—ã
echo "üìÇ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º FFmpeg –∞—Ä—Ö–∏–≤—ã..."
if [ -f "ffmpeg-linux.tar.xz" ]; then
    tar -xf ffmpeg-linux.tar.xz || echo "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ FFmpeg Linux"
fi

if [ -f "ffmpeg-windows.zip" ]; then
    unzip -q ffmpeg-windows.zip || echo "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ FFmpeg Windows"
fi

if [ -f "ffmpeg-macos.zip" ]; then
    unzip -q ffmpeg-macos.zip || echo "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ FFmpeg macOS"
fi

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–ª–æ—Å—å
echo "üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å–ª–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏:"
ls -la

# –ù–∞—Ö–æ–¥–∏–º —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
MACOS_DIR=$(find . -name "*macos*" -type d | head -1)
WINDOWS_DIR=$(find . -name "*windows*" -type d | head -1)
UBUNTU_DIR=$(find . -name "*ubuntu*" -type d | head -1)

echo "üìÅ –ù–∞–π–¥–µ–Ω–Ω—ã–µ waifu2x –ø–∞–ø–∫–∏:"
echo "  macOS: $MACOS_DIR"
echo "  Windows: $WINDOWS_DIR"
echo "  Ubuntu: $UBUNTU_DIR"

# –ù–∞—Ö–æ–¥–∏–º FFmpeg –ø–∞–ø–∫–∏
FFMPEG_LINUX_DIR=$(find . -name "*ffmpeg*linux*" -type d | head -1)
FFMPEG_WINDOWS_DIR=$(find . -name "*ffmpeg*win*" -type d | head -1)

echo "üìÅ –ù–∞–π–¥–µ–Ω–Ω—ã–µ FFmpeg –ø–∞–ø–∫–∏:"
echo "  Linux: $FFMPEG_LINUX_DIR"
echo "  Windows: $FFMPEG_WINDOWS_DIR"

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ FFmpeg –≤ –ø–∞–ø–∫–µ
find_ffmpeg() {
    local dir=$1
    local platform=$2
    
    echo "üîç –ò—â–µ–º FFmpeg –≤ $dir –¥–ª—è $platform..."
    
    if [ -d "$dir" ]; then
        find "$dir" -name "ffmpeg*" -type f | while read ffmpeg_file; do
            local size=$(stat -c%s "$ffmpeg_file" 2>/dev/null || stat -f%z "$ffmpeg_file" 2>/dev/null || echo "0")
            local size_mb=$((size / 1024 / 1024))
            echo "  –ù–∞–π–¥–µ–Ω: $ffmpeg_file (${size_mb}MB)"
        done
    fi
}

# –ò—â–µ–º FFmpeg –≤ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–µ
for dir in $MACOS_DIR $WINDOWS_DIR $UBUNTU_DIR $FFMPEG_LINUX_DIR $FFMPEG_WINDOWS_DIR; do
    if [ -n "$dir" ] && [ -d "$dir" ]; then
        find_ffmpeg "$dir" "$(basename "$dir")"
    fi
done

# –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π –∏ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
copy_models() {
    local source_dir=$1
    local target_platform=$2
    
    echo "üì• –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –¥–ª—è $target_platform –∏–∑ $source_dir..."
    
    if [ ! -d "$source_dir" ]; then
        echo "‚ùå –ü–∞–ø–∫–∞ $source_dir –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        return 1
    fi
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
    echo "üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ $source_dir:"
    ls -la "$source_dir/"
    
    # –ö–æ–ø–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
    for model_dir in "models-cunet" "models-upconv_7_anime_style_art_rgb" "models-upconv_7_photo"; do
        if [ -d "$source_dir/$model_dir" ]; then
            cp -r "$source_dir/$model_dir"/* "../assets/executables/$target_platform/$model_dir/"
            echo "‚úÖ $model_dir —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è $target_platform"
        else
            echo "‚ö†Ô∏è $model_dir –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ $source_dir"
        fi
    done
    
    # –ö–æ–ø–∏—Ä—É–µ–º waifu2x
    if [ -f "$source_dir/waifu2x-ncnn-vulkan" ]; then
        cp "$source_dir/waifu2x-ncnn-vulkan" "../assets/executables/$target_platform/"
        echo "‚úÖ waifu2x-ncnn-vulkan —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –¥–ª—è $target_platform"
    elif [ -f "$source_dir/waifu2x-ncnn-vulkan.exe" ]; then
        cp "$source_dir/waifu2x-ncnn-vulkan.exe" "../assets/executables/$target_platform/"
        echo "‚úÖ waifu2x-ncnn-vulkan.exe —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –¥–ª—è $target_platform"
    else
        echo "‚ö†Ô∏è waifu2x –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ $source_dir"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è FFmpeg
copy_ffmpeg() {
    local source_dir=$1
    local target_platform=$2
    local ffmpeg_name=$3
    
    echo "üì• –ò—â–µ–º FFmpeg –¥–ª—è $target_platform..."
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ waifu2x –ø–∞–ø–∫–µ
    local ffmpeg_path=""
    if [ -f "$source_dir/$ffmpeg_name" ]; then
        ffmpeg_path="$source_dir/$ffmpeg_name"
    else
        # –ò—â–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
        ffmpeg_path=$(find "$source_dir" -name "$ffmpeg_name" -type f | head -1)
    fi
    
    if [ -n "$ffmpeg_path" ] && [ -f "$ffmpeg_path" ]; then
        local size=$(stat -c%s "$ffmpeg_path" 2>/dev/null || stat -f%z "$ffmpeg_path" 2>/dev/null || echo "0")
        local size_mb=$((size / 1024 / 1024))
        
        if [ $size_mb -gt 10 ]; then
            cp "$ffmpeg_path" "../assets/executables/$target_platform/$ffmpeg_name"
            echo "‚úÖ FFmpeg —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –¥–ª—è $target_platform (${size_mb}MB)"
            return 0
        else
            echo "‚ö†Ô∏è FFmpeg –Ω–∞–π–¥–µ–Ω –Ω–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª (${size_mb}MB): $ffmpeg_path"
        fi
    fi
    
    return 1
}

# –ö–æ–ø–∏—Ä—É–µ–º FFmpeg –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
copy_standalone_ffmpeg() {
    local platform=$1
    local ffmpeg_name=$2
    
    case $platform in
        "linux")
            if [ -n "$FFMPEG_LINUX_DIR" ]; then
                local ffmpeg_path=$(find "$FFMPEG_LINUX_DIR" -name "ffmpeg" -type f | head -1)
                if [ -n "$ffmpeg_path" ] && [ -f "$ffmpeg_path" ]; then
                    cp "$ffmpeg_path" "../assets/executables/$platform/ffmpeg"
                    echo "‚úÖ Standalone FFmpeg —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –¥–ª—è Linux"
                    return 0
                fi
            fi
            ;;
        "windows")
            if [ -n "$FFMPEG_WINDOWS_DIR" ]; then
                local ffmpeg_path=$(find "$FFMPEG_WINDOWS_DIR" -name "ffmpeg.exe" -type f | head -1)
                if [ -n "$ffmpeg_path" ] && [ -f "$ffmpeg_path" ]; then
                    cp "$ffmpeg_path" "../assets/executables/$platform/ffmpeg.exe"
                    echo "‚úÖ Standalone FFmpeg —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –¥–ª—è Windows"
                    return 0
                fi
            fi
            ;;
        "macos")
            if [ -f "ffmpeg" ]; then  # –ò–∑ evermeet –∞—Ä—Ö–∏–≤–∞
                cp "ffmpeg" "../assets/executables/$platform/ffmpeg"
                echo "‚úÖ Standalone FFmpeg —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –¥–ª—è macOS"
                return 0
            fi
            ;;
    esac
    
    return 1
}

# –ö–æ–ø–∏—Ä—É–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
echo "üì¶ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤..."

# macOS
if [ -n "$MACOS_DIR" ]; then
    copy_models "$MACOS_DIR" "macos"
    if ! copy_ffmpeg "$MACOS_DIR" "macos" "ffmpeg"; then
        copy_standalone_ffmpeg "macos" "ffmpeg"
    fi
fi

# Windows  
if [ -n "$WINDOWS_DIR" ]; then
    copy_models "$WINDOWS_DIR" "windows"
    if ! copy_ffmpeg "$WINDOWS_DIR" "windows" "ffmpeg.exe"; then
        copy_standalone_ffmpeg "windows" "ffmpeg.exe"
    fi
fi

# Linux
if [ -n "$UBUNTU_DIR" ]; then
    copy_models "$UBUNTU_DIR" "linux"
    if ! copy_ffmpeg "$UBUNTU_DIR" "linux" "ffmpeg"; then
        copy_standalone_ffmpeg "linux" "ffmpeg"
    fi
fi

# –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–µ–Ω—å –∏ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
cd ..
rm -rf "$TEMP_DIR"

echo "‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"

# –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤
echo "üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –†–ê–ó–ú–ï–†–û–í –§–ê–ô–õ–û–í:"
all_good=true

for platform in macos windows linux; do
    echo "üìÅ $platform:"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º FFmpeg
    ffmpeg_name="ffmpeg"
    if [ "$platform" = "windows" ]; then
        ffmpeg_name="ffmpeg.exe"
    fi
    
    if [ -f "assets/executables/$platform/$ffmpeg_name" ]; then
        size=$(stat -c%s "assets/executables/$platform/$ffmpeg_name" 2>/dev/null || stat -f%z "assets/executables/$platform/$ffmpeg_name" 2>/dev/null || echo "0")
        size_mb=$((size / 1024 / 1024))
        
        if [ $size_mb -gt 50 ]; then
            echo "  ‚úÖ FFmpeg: ${size_mb}MB - –ù–ê–°–¢–û–Ø–©–ò–ô –§–ê–ô–õ!"
        else
            echo "  üíÄ FFmpeg: ${size_mb}MB - –°–õ–ò–®–ö–û–ú –ú–ê–õ!"
            all_good=false
        fi
    else
        echo "  ‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω"
        all_good=false
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏
    if [ -d "assets/executables/$platform/models-cunet" ]; then
        model_count=$(find "assets/executables/$platform/models-cunet" -name "*.param" 2>/dev/null | wc -l)
        if [ $model_count -gt 0 ]; then
            echo "  ‚úÖ –ú–æ–¥–µ–ª–∏: $model_count —Ñ–∞–π–ª–æ–≤ .param"
        else
            echo "  ‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            all_good=false
        fi
    else
        echo "  ‚ùå –ü–∞–ø–∫–∞ –º–æ–¥–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        all_good=false
    fi
done

if [ "$all_good" = true ]; then
    echo ""
    echo "üéØ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!"
    exit 0
else
    echo ""
    echo "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–∞–π–ª–æ–≤!"
    exit 1
fi
