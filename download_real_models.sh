#!/bin/bash

echo "üì• –°–∫–∞—á–∏–≤–∞–µ–º –ù–ê–°–¢–û–Ø–©–ò–ï —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏ –∏–∑ GitHub Releases..."

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞  
cd "$(dirname "$0")"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–µ–π
echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –º–æ–¥–µ–ª–µ–π..."
for platform in macos windows linux; do
    mkdir -p "assets/executables/$platform/models-cunet"
    mkdir -p "assets/executables/$platform/models-upconv_7_anime_style_art_rgb"
    mkdir -p "assets/executables/$platform/models-upconv_7_photo"
done

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
TEMP_DIR="temp_models_download"
rm -rf "$TEMP_DIR"
mkdir -p "$TEMP_DIR"
cd "$TEMP_DIR"

# –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
download_with_retry() {
    local url=$1
    local output=$2
    local attempts=3
    
    for i in $(seq 1 $attempts); do
        echo "–ü–æ–ø—ã—Ç–∫–∞ $i/$attempts: —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ $output..."
        if curl -L --fail --connect-timeout 30 --max-time 600 -o "$output" "$url"; then
            if [ -f "$output" ] && [ -s "$output" ]; then
                local size=$(stat -c%s "$output" 2>/dev/null || stat -f%z "$output" 2>/dev/null || echo "0")
                local size_mb=$((size / 1024 / 1024))
                echo "‚úÖ $output —Å–∫–∞—á–∞–Ω: ${size_mb}MB"
                return 0
            fi
        fi
        echo "‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è $output (–ø–æ–ø—ã—Ç–∫–∞ $i)"
        sleep 5
    done
    
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å $output –ø–æ—Å–ª–µ $attempts –ø–æ–ø—ã—Ç–æ–∫"
    return 1
}

# –°–∫–∞—á–∏–≤–∞–µ–º waifu2x –∞—Ä—Ö–∏–≤—ã
echo "üì¶ –°–∫–∞—á–∏–≤–∞–µ–º waifu2x release 20220728..."
download_with_retry "https://github.com/nihui/waifu2x-ncnn-vulkan/releases/download/20220728/waifu2x-ncnn-vulkan-20220728-macos.zip" "waifu2x-macos.zip" || exit 1
download_with_retry "https://github.com/nihui/waifu2x-ncnn-vulkan/releases/download/20220728/waifu2x-ncnn-vulkan-20220728-windows.zip" "waifu2x-windows.zip" || exit 1
download_with_retry "https://github.com/nihui/waifu2x-ncnn-vulkan/releases/download/20220728/waifu2x-ncnn-vulkan-20220728-ubuntu.zip" "waifu2x-ubuntu.zip" || exit 1

# –ù–û–í–û–ï: –°–∫–∞—á–∏–≤–∞–µ–º FFmpeg –∏–∑ –Ω–∞–¥–µ–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
echo "üì¶ –°–∫–∞—á–∏–≤–∞–µ–º FFmpeg –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤..."

# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é FFmpeg –¥–ª—è Windows (gyan.dev - —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π)
echo "ü™ü –°–∫–∞—á–∏–≤–∞–µ–º FFmpeg –¥–ª—è Windows..."
download_with_retry "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip" "ffmpeg-windows-gyan.zip" || {
    echo "‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π..."
    download_with_retry "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip" "ffmpeg-windows-btbn.zip" || {
        echo "‚ö†Ô∏è –û–±–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ Windows FFmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –≤ waifu2x"
    }
}

# FFmpeg –¥–ª—è Linux  
echo "üêß –°–∫–∞—á–∏–≤–∞–µ–º FFmpeg –¥–ª—è Linux..."
download_with_retry "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-linux64-gpl.tar.xz" "ffmpeg-linux.tar.xz" || echo "‚ö†Ô∏è FFmpeg Linux –Ω–µ —Å–∫–∞—á–∞–Ω"

# FFmpeg –¥–ª—è macOS
echo "üçé –°–∫–∞—á–∏–≤–∞–µ–º FFmpeg –¥–ª—è macOS..."
download_with_retry "https://evermeet.cx/ffmpeg/ffmpeg-6.1.zip" "ffmpeg-macos.zip" || {
    echo "‚ö†Ô∏è –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ macOS FFmpeg..."
    download_with_retry "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-macos64-gpl.tar.xz" "ffmpeg-macos.tar.xz" || echo "‚ö†Ô∏è FFmpeg macOS –Ω–µ —Å–∫–∞—á–∞–Ω"
}

# –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º waifu2x –∞—Ä—Ö–∏–≤—ã
echo "üìÇ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º waifu2x –∞—Ä—Ö–∏–≤—ã..."
unzip -q waifu2x-macos.zip || exit 1
unzip -q waifu2x-windows.zip || exit 1  
unzip -q waifu2x-ubuntu.zip || exit 1

# –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º FFmpeg –∞—Ä—Ö–∏–≤—ã
echo "üìÇ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º FFmpeg –∞—Ä—Ö–∏–≤—ã..."

# Linux FFmpeg
if [ -f "ffmpeg-linux.tar.xz" ]; then
    echo "–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ Linux FFmpeg..."
    tar -xf ffmpeg-linux.tar.xz && echo "‚úÖ Linux FFmpeg —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω" || echo "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ Linux FFmpeg"
fi

# Windows FFmpeg (–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
if [ -f "ffmpeg-windows-gyan.zip" ]; then
    echo "–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ Windows FFmpeg (Gyan)..."
    unzip -q ffmpeg-windows-gyan.zip && echo "‚úÖ Windows FFmpeg (Gyan) —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω" || echo "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏"
elif [ -f "ffmpeg-windows-btbn.zip" ]; then
    echo "–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ Windows FFmpeg (BtbN)..."
    unzip -q ffmpeg-windows-btbn.zip && echo "‚úÖ Windows FFmpeg (BtbN) —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω" || echo "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏"
fi

# macOS FFmpeg
if [ -f "ffmpeg-macos.zip" ]; then
    echo "–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ macOS FFmpeg (evermeet)..."
    unzip -q ffmpeg-macos.zip && echo "‚úÖ macOS FFmpeg —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω" || echo "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏"
elif [ -f "ffmpeg-macos.tar.xz" ]; then
    echo "–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ macOS FFmpeg (BtbN)..."
    tar -xf ffmpeg-macos.tar.xz && echo "‚úÖ macOS FFmpeg —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω" || echo "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏"
fi

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–ª–æ—Å—å
echo "üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å–ª–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏:"
ls -la

# –ù–∞—Ö–æ–¥–∏–º waifu2x –ø–∞–ø–∫–∏
MACOS_DIR=$(find . -name "*macos*" -type d | head -1)
WINDOWS_DIR=$(find . -name "*windows*" -type d | head -1)
UBUNTU_DIR=$(find . -name "*ubuntu*" -type d | head -1)

echo "üìÅ –ù–∞–π–¥–µ–Ω–Ω—ã–µ waifu2x –ø–∞–ø–∫–∏:"
echo "  macOS: $MACOS_DIR"
echo "  Windows: $WINDOWS_DIR"
echo "  Ubuntu: $UBUNTU_DIR"

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ FFmpeg –≤ –ª—é–±–æ–π –ø–∞–ø–∫–µ
find_and_copy_ffmpeg() {
    local target_platform=$1
    local executable_name=$2
    
    echo "üîç –ü–æ–∏—Å–∫ FFmpeg –¥–ª—è $target_platform (–∏—â–µ–º $executable_name)..."
    
    # –ò—â–µ–º –≤–æ –≤—Å–µ—Ö —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö
    local found_ffmpeg=""
    
    # –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–º –º–µ—Å—Ç–∞–º
    for search_path in . */bin */ffmpeg* ffmpeg* *ffmpeg*; do
        if [ -d "$search_path" ]; then
            local candidate=$(find "$search_path" -name "$executable_name" -type f 2>/dev/null | head -1)
            if [ -n "$candidate" ] && [ -f "$candidate" ]; then
                local size=$(stat -c%s "$candidate" 2>/dev/null || stat -f%z "$candidate" 2>/dev/null || echo "0")
                local size_mb=$((size / 1024 / 1024))
                
                echo "  –ù–∞–π–¥–µ–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç: $candidate (${size_mb}MB)"
                
                if [ $size_mb -gt 10 ]; then
                    found_ffmpeg="$candidate"
                    echo "  ‚úÖ –ü–æ–¥—Ö–æ–¥—è—â–∏–π FFmpeg –Ω–∞–π–¥–µ–Ω: $candidate"
                    break
                else
                    echo "  ‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–∞–ª: $candidate"
                fi
            fi
        fi
    done
    
    # –ö–æ–ø–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
    if [ -n "$found_ffmpeg" ] && [ -f "$found_ffmpeg" ]; then
        cp "$found_ffmpeg" "../assets/executables/$target_platform/$executable_name"
        local final_size=$(stat -c%s "../assets/executables/$target_platform/$executable_name" 2>/dev/null || stat -f%z "../assets/executables/$target_platform/$executable_name" 2>/dev/null || echo "0")
        local final_size_mb=$((final_size / 1024 / 1024))
        echo "‚úÖ FFmpeg —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –¥–ª—è $target_platform: ${final_size_mb}MB"
        return 0
    else
        echo "‚ùå FFmpeg –¥–ª—è $target_platform –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è waifu2x –∏ –º–æ–¥–µ–ª–µ–π
copy_waifu2x_models() {
    local source_dir=$1
    local target_platform=$2
    
    echo "üì• –ö–æ–ø–∏—Ä—É–µ–º waifu2x –∏ –º–æ–¥–µ–ª–∏ –¥–ª—è $target_platform..."
    
    if [ ! -d "$source_dir" ]; then
        echo "‚ùå –ü–∞–ø–∫–∞ $source_dir –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        return 1
    fi
    
    # –ö–æ–ø–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
    for model_dir in "models-cunet" "models-upconv_7_anime_style_art_rgb" "models-upconv_7_photo"; do
        if [ -d "$source_dir/$model_dir" ]; then
            cp -r "$source_dir/$model_dir"/* "../assets/executables/$target_platform/$model_dir/"
            echo "‚úÖ $model_dir —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞"
        else
            echo "‚ö†Ô∏è $model_dir –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        fi
    done
    
    # –ö–æ–ø–∏—Ä—É–µ–º waifu2x
    local waifu2x_name="waifu2x-ncnn-vulkan"
    if [ "$target_platform" = "windows" ]; then
        waifu2x_name="waifu2x-ncnn-vulkan.exe"
    fi
    
    if [ -f "$source_dir/$waifu2x_name" ]; then
        cp "$source_dir/$waifu2x_name" "../assets/executables/$target_platform/"
        echo "‚úÖ $waifu2x_name —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω"
    else
        echo "‚ö†Ô∏è $waifu2x_name –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –ö–æ–ø–∏—Ä—É–µ–º waifu2x –∏ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
echo "üì¶ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ waifu2x –∏ –º–æ–¥–µ–ª–µ–π..."

if [ -n "$MACOS_DIR" ]; then
    copy_waifu2x_models "$MACOS_DIR" "macos"
fi

if [ -n "$WINDOWS_DIR" ]; then
    copy_waifu2x_models "$WINDOWS_DIR" "windows"
fi

if [ -n "$UBUNTU_DIR" ]; then
    copy_waifu2x_models "$UBUNTU_DIR" "linux"
fi

# –ò—â–µ–º –∏ –∫–æ–ø–∏—Ä—É–µ–º FFmpeg –¥–ª—è –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
echo "üì¶ –ü–æ–∏—Å–∫ –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ FFmpeg..."

find_and_copy_ffmpeg "linux" "ffmpeg"
find_and_copy_ffmpeg "windows" "ffmpeg.exe"
find_and_copy_ffmpeg "macos" "ffmpeg"

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –µ—Å–ª–∏ FFmpeg –≤ Windows –∏–ª–∏ Linux –Ω–µ –Ω–∞–π–¥–µ–Ω, –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ waifu2x –ø–∞–ø–æ–∫
echo "üîÑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ FFmpeg –≤ waifu2x –∞—Ä—Ö–∏–≤–∞—Ö..."

# –î–ª—è Windows
if [ ! -f "../assets/executables/windows/ffmpeg.exe" ] && [ -n "$WINDOWS_DIR" ]; then
    if [ -f "$WINDOWS_DIR/ffmpeg.exe" ]; then
        cp "$WINDOWS_DIR/ffmpeg.exe" "../assets/executables/windows/"
        echo "‚úÖ FFmpeg —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏–∑ Windows waifu2x –∞—Ä—Ö–∏–≤–∞"
    fi
fi

# –î–ª—è Linux  
if [ ! -f "../assets/executables/linux/ffmpeg" ] && [ -n "$UBUNTU_DIR" ]; then
    if [ -f "$UBUNTU_DIR/ffmpeg" ]; then
        cp "$UBUNTU_DIR/ffmpeg" "../assets/executables/linux/"
        echo "‚úÖ FFmpeg —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏–∑ Linux waifu2x –∞—Ä—Ö–∏–≤–∞"
    fi
fi

# –î–ª—è macOS
if [ ! -f "../assets/executables/macos/ffmpeg" ] && [ -n "$MACOS_DIR" ]; then
    if [ -f "$MACOS_DIR/ffmpeg" ]; then
        cp "$MACOS_DIR/ffmpeg" "../assets/executables/macos/"
        echo "‚úÖ FFmpeg —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏–∑ macOS waifu2x –∞—Ä—Ö–∏–≤–∞"
    fi
fi

# –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–µ–Ω—å
cd ..
rm -rf "$TEMP_DIR"

echo "‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"

# –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
echo "üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –†–ê–ó–ú–ï–†–û–í –§–ê–ô–õ–û–í:"
all_good=true

for platform in linux windows macos; do
    echo "üìÅ $platform:"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è FFmpeg
    ffmpeg_name="ffmpeg"
    if [ "$platform" = "windows" ]; then
        ffmpeg_name="ffmpeg.exe"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º FFmpeg
    if [ -f "assets/executables/$platform/$ffmpeg_name" ]; then
        size=$(stat -c%s "assets/executables/$platform/$ffmpeg_name" 2>/dev/null || stat -f%z "assets/executables/$platform/$ffmpeg_name" 2>/dev/null || echo "0")
        size_mb=$((size / 1024 / 1024))
        
        if [ $size_mb -gt 50 ]; then
            echo "  ‚úÖ FFmpeg: ${size_mb}MB - –ù–ê–°–¢–û–Ø–©–ò–ô –§–ê–ô–õ!"
        else
            echo "  üíÄ FFmpeg: ${size_mb}MB - –°–õ–ò–®–ö–û–ú –ú–ê–õ!"
            all_good=false
        fi
    else
        echo "  ‚ùå FFmpeg ($ffmpeg_name) –Ω–µ –Ω–∞–π–¥–µ–Ω"
        all_good=false
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º waifu2x
    waifu2x_name="waifu2x-ncnn-vulkan"
    if [ "$platform" = "windows" ]; then
        waifu2x_name="waifu2x-ncnn-vulkan.exe"
    fi
    
    if [ -f "assets/executables/$platform/$waifu2x_name" ]; then
        size=$(stat -c%s "assets/executables/$platform/$waifu2x_name" 2>/dev/null || stat -f%z "assets/executables/$platform/$waifu2x_name" 2>/dev/null || echo "0")
        size_mb=$((size / 1024 / 1024))
        echo "  ‚úÖ waifu2x: ${size_mb}MB"
    else
        echo "  ‚ùå waifu2x –Ω–µ –Ω–∞–π–¥–µ–Ω"
        all_good=false
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏
    if [ -d "assets/executables/$platform/models-cunet" ]; then
        model_count=$(find "assets/executables/$platform/models-cunet" -name "*.param" 2>/dev/null | wc -l)
        if [ $model_count -gt 0 ]; then
            echo "  ‚úÖ –ú–æ–¥–µ–ª–∏: $model_count —Ñ–∞–π–ª–æ–≤ .param"
        else
            echo "  ‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            all_good=false
        fi
    else
        echo "  ‚ùå –ü–∞–ø–∫–∞ –º–æ–¥–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        all_good=false
    fi
done

if [ "$all_good" = true ]; then
    echo ""
    echo "üéØ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!"
    exit 0
else
    echo ""
    echo "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–∞–π–ª–æ–≤!"
    exit 1
fi
